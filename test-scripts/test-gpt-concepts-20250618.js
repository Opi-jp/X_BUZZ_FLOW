#!/usr/bin/env node
require('dotenv').config({ path: '.env.local' });

const fs = require('fs').promises;
const path = require('path');

async function testGPTConcepts() {
  try {
    // „É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
    const mockDataPath = path.join(process.cwd(), 'lib/prompts/mock-data/perplexity/ai-work-20250618.json');
    const mockData = JSON.parse(await fs.readFile(mockDataPath, 'utf-8'));
    
    // GPT„Éó„É≠„É≥„Éó„Éà„ÇíË™≠„ÅøËæº„ÇÄ
    const promptPath = path.join(process.cwd(), 'lib/prompts/gpt/generate-concepts.txt');
    let promptTemplate = await fs.readFile(promptPath, 'utf-8');
    
    // ÊúÄÂàù„ÅÆ„Éà„Éî„ÉÉ„ÇØ„Çí‰ΩøÁî®
    const topic = mockData.response.topics[0];
    const variables = {
      platform: mockData.variables.platform,
      style: mockData.variables.style,
      topicTitle: topic.TOPIC,
      topicAnalysis: topic.perplexityAnalysis,
      topicUrl: topic.url,
      topicIndex: 0
    };
    
    // Â§âÊï∞„ÇíÁΩÆÊèõ
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`\\$\\{${key}\\}`, 'g');
      promptTemplate = promptTemplate.replace(regex, String(value));
    });
    
    console.log('üìä ‰ΩøÁî®„Åô„Çã„Éà„Éî„ÉÉ„ÇØ:');
    console.log('‚îÄ'.repeat(80));
    console.log(`„Çø„Ç§„Éà„É´: ${topic.TOPIC}`);
    console.log(`Ë®ò‰∫ã: ${topic.title}`);
    console.log(`Ë¶ÅÁ¥Ñ: ${topic.summary.substring(0, 100)}...`);
    console.log(`ÂàÜÊûê: ${topic.perplexityAnalysis}`);
    console.log('‚îÄ'.repeat(80));
    
    // OpenAI APIÂëº„Å≥Âá∫„Åó
    console.log('\nüîÑ OpenAI GPT-4„ÇíÂëº„Å≥Âá∫„Åó‰∏≠...\n');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: '„ÅÇ„Å™„Åü„ÅØ„Éê„Ç§„É©„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ‰∏é„Åà„Çâ„Çå„Åü„Éà„Éî„ÉÉ„ÇØ„Åã„Çâ„ÄÅ„Éê„Ç∫„ÇãÊäïÁ®ø„Ç≥„É≥„Çª„Éó„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
          },
          {
            role: 'user',
            content: promptTemplate
          }
        ],
        temperature: 0.8,
        max_tokens: 4000
      })
    });
    
    if (!response.ok) {
      const error = await response.text();
      console.error('‚ùå OpenAI API„Ç®„É©„Éº:', error);
      return;
    }
    
    const data = await response.json();
    const content = data.choices[0].message.content;
    
    // „Ç≥„É≥„Çª„Éó„Éà„ÇíÊäΩÂá∫
    let concepts = [];
    try {
      // JSON„Éñ„É≠„ÉÉ„ÇØ„ÇíÊé¢„Åô
      const jsonMatch = content.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        concepts = JSON.parse(jsonMatch[0]);
      }
    } catch (e) {
      console.error('JSON„Éë„Éº„Çπ„Ç®„É©„Éº:', e.message);
      console.log('Áîü„ÅÆÂøúÁ≠î:', content);
    }
    
    console.log(`‚úÖ ÁîüÊàê„Åï„Çå„Åü„Ç≥„É≥„Çª„Éó„ÉàÊï∞: ${concepts.length}\n`);
    
    // „Ç≥„É≥„Çª„Éó„Éà„ÇíË°®Á§∫
    concepts.forEach((concept, index) => {
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
      console.log(`üí° „Ç≥„É≥„Çª„Éó„Éà${index + 1}: ${concept.conceptTitle}`);
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
      console.log(`üìù ÂΩ¢Âºè: ${concept.format === 'single' ? 'ÂçòÁã¨ÊäïÁ®ø' : '„ÉÑ„É™„ÉºÊäïÁ®ø'}`);
      console.log(`üéØ „Éï„ÉÉ„ÇØ: ${concept.hookType}`);
      if (concept.hookCombination?.length > 0) {
        console.log(`   ÁµÑ„ÅøÂêà„Çè„Åõ: ${concept.hookCombination.join('„ÄÅ')}`);
      }
      console.log(`üìê ËßíÂ∫¶: ${concept.angle}`);
      if (concept.angleCombination?.length > 0) {
        console.log(`   ÁµÑ„ÅøÂêà„Çè„Åõ: ${concept.angleCombination.join('„ÄÅ')}`);
      }
      console.log(`üí¨ ËßíÂ∫¶„ÅÆÁêÜÁî±: ${concept.angleRationale}`);
      console.log(`üî• „Éê„Ç§„É©„É´„Çπ„Ç≥„Ç¢: ${concept.viralScore}/100`);
      console.log(`‚ú® „Éê„Ç∫Ë¶ÅÂõ†: ${concept.viralFactors.join('„ÄÅ')}`);
      
      console.log('\nüìã ÊäïÁ®øÊßãÈÄ†:');
      console.log(`  „Éï„ÉÉ„ÇØ: ${concept.structure.openingHook}`);
      console.log(`  ËÉåÊôØ: ${concept.structure.background}`);
      console.log(`  „É°„Ç§„É≥: ${concept.structure.mainContent}`);
      console.log(`  ÊåØ„ÇäËøî„Çä: ${concept.structure.reflection}`);
      console.log(`  CTA: ${concept.structure.cta}`);
      
      console.log(`\nüñºÔ∏è  „Éì„Ç∏„É•„Ç¢„É´: ${concept.visual}`);
      console.log(`‚è∞ „Çø„Ç§„Éü„É≥„Ç∞: ${concept.timing}`);
      console.log(`#Ô∏è‚É£  „Éè„ÉÉ„Ç∑„É•„Çø„Ç∞: ${concept.hashtags.join(' ')}`);
      console.log('');
    });
    
    // ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
    console.log('üìã ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ:');
    const checks = {
      '3„Å§„ÅÆ„Ç≥„É≥„Çª„Éó„Éà„ÅåÁîüÊàê': concepts.length === 3,
      'Áï∞„Å™„ÇãËßíÂ∫¶„Çí‰ΩøÁî®': new Set(concepts.map(c => c.angle)).size === 3,
      'structureÂÆåÂÇô': concepts.every(c => c.structure && Object.keys(c.structure).length === 5),
      '„Éê„Ç§„É©„É´„Çπ„Ç≥„Ç¢ÈÅ©Ê≠£': concepts.every(c => c.viralScore >= 70 && c.viralScore <= 100),
      'conceptIdÊ≠£„Åó„ÅÑ': concepts.every((c, i) => c.conceptId === `topic0_concept${i + 1}`)
    };
    
    Object.entries(checks).forEach(([check, result]) => {
      console.log(`${result ? '‚úÖ' : '‚ùå'} ${check}`);
    });
    
  } catch (error) {
    console.error('„Ç®„É©„Éº:', error);
  }
}

testGPTConcepts();