#!/usr/bin/env node
require('dotenv').config({ path: '.env.local' });

const fs = require('fs').promises;
const path = require('path');

async function testGPTConceptsImproved() {
  try {
    // „É¢„ÉÉ„ÇØ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄ
    const mockDataPath = path.join(process.cwd(), 'lib/prompts/mock-data/perplexity/ai-work-20250618.json');
    const mockData = JSON.parse(await fs.readFile(mockDataPath, 'utf-8'));
    
    // GPT„Éó„É≠„É≥„Éó„Éà„ÇíË™≠„ÅøËæº„ÇÄ
    const promptPath = path.join(process.cwd(), 'lib/prompts/gpt/generate-concepts.txt');
    let promptTemplate = await fs.readFile(promptPath, 'utf-8');
    
    // ÊúÄÂàù„ÅÆ„Éà„Éî„ÉÉ„ÇØ„Çí‰ΩøÁî®
    const topic = mockData.response.topics[0];
    const variables = {
      platform: mockData.variables.platform,
      style: mockData.variables.style,
      topicTitle: topic.TOPIC,
      topicSource: topic.source,
      topicDate: topic.date,
      topicUrl: topic.url,
      topicSummary: topic.summary,
      topicKeyPoints: topic.keyPoints.map((point, i) => `${i + 1}. ${point}`).join('\n'),
      topicAnalysis: topic.perplexityAnalysis,
      topicIndex: 0
    };
    
    // Â§âÊï∞„ÇíÁΩÆÊèõ
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`\\$\\{${key}\\}`, 'g');
      promptTemplate = promptTemplate.replace(regex, String(value));
    });
    
    console.log('üìä ÊîπÂñÑÁâàÔºö‰ΩøÁî®„Åô„Çã„Éà„Éî„ÉÉ„ÇØÊÉÖÂ†±:');
    console.log('‚îÄ'.repeat(80));
    console.log(`„Çø„Ç§„Éà„É´: ${topic.TOPIC}`);
    console.log(`„É°„Éá„Ç£„Ç¢: ${topic.source}`);
    console.log(`ÂÖ¨ÈñãÊó•: ${topic.date}`);
    console.log(`\nüìÑ Ë¶ÅÁ¥Ñ (${topic.summary.length}ÊñáÂ≠ó):`);
    console.log(topic.summary);
    console.log(`\nüìå ÈáçË¶Å„Éù„Ç§„É≥„Éà:`);
    topic.keyPoints.forEach((point, i) => {
      console.log(`  ${i + 1}. ${point}`);
    });
    console.log(`\nüí° „Éê„Ç∫ÂàÜÊûê:`);
    console.log(topic.perplexityAnalysis);
    console.log('‚îÄ'.repeat(80));
    
    // OpenAI APIÂëº„Å≥Âá∫„Åó
    console.log('\nüîÑ OpenAI GPT-4„ÇíÂëº„Å≥Âá∫„Åó‰∏≠ÔºàÊîπÂñÑÁâàÔºâ...\n');
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: '„ÅÇ„Å™„Åü„ÅØ„Éê„Ç§„É©„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ‰∏é„Åà„Çâ„Çå„ÅüË©≥Á¥∞„Å™Ë®ò‰∫ãÊÉÖÂ†±„Åã„Çâ„ÄÅÊ∑±„ÅÑÊ¥ûÂØü„Å´Âü∫„Å•„ÅÑ„Åü„Éê„Ç∫„ÇãÊäïÁ®ø„Ç≥„É≥„Çª„Éó„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
          },
          {
            role: 'user',
            content: promptTemplate
          }
        ],
        temperature: 0.8,
        max_tokens: 4000
      })
    });
    
    if (!response.ok) {
      const error = await response.text();
      console.error('‚ùå OpenAI API„Ç®„É©„Éº:', error);
      return;
    }
    
    const data = await response.json();
    const content = data.choices[0].message.content;
    
    // „Ç≥„É≥„Çª„Éó„Éà„ÇíÊäΩÂá∫
    let concepts = [];
    try {
      const jsonMatch = content.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        concepts = JSON.parse(jsonMatch[0]);
      }
    } catch (e) {
      console.error('JSON„Éë„Éº„Çπ„Ç®„É©„Éº:', e.message);
    }
    
    console.log(`‚úÖ ÁîüÊàê„Åï„Çå„Åü„Ç≥„É≥„Çª„Éó„ÉàÊï∞: ${concepts.length}\n`);
    
    // „Ç≥„É≥„Çª„Éó„Éà„ÇíË°®Á§∫ÔºàÊîπÂñÑÁÇπ„Å´Ê≥®ÁõÆÔºâ
    concepts.forEach((concept, index) => {
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
      console.log(`üí° „Ç≥„É≥„Çª„Éó„Éà${index + 1}: ${concept.conceptTitle}`);
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
      
      // Ë®ò‰∫ã„ÅÆÂÖ∑‰ΩìÁöÑ„Å™ÂÜÖÂÆπ„Å∏„ÅÆË®ÄÂèä„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const referencesKeyPoints = concept.structure.mainContent.includes('ÂçäÊï∞') || 
                                 concept.structure.mainContent.includes('10%„Åã„Çâ20%') ||
                                 concept.structure.mainContent.includes('5Âπ¥');
      
      if (referencesKeyPoints) {
        console.log('‚ú® ÊîπÂñÑ: Ë®ò‰∫ã„ÅÆÂÖ∑‰ΩìÁöÑ„Å™Êï∞ÂÄ§„ÇíÊ¥ªÁî®');
      }
      
      console.log(`\nüìã ÊäïÁ®øÊßãÈÄ†:`);
      console.log(`  „Éï„ÉÉ„ÇØ: ${concept.structure.openingHook}`);
      console.log(`  „É°„Ç§„É≥: ${concept.structure.mainContent}`);
      
      if (concept.structure.mainContent.length > 150) {
        console.log('‚ú® ÊîπÂñÑ: „Çà„ÇäË©≥Á¥∞„Å™ÂÜÖÂÆπÂ±ïÈñã');
      }
    });
    
    // ÊîπÂñÑÂäπÊûú„ÅÆÂàÜÊûê
    console.log('\nüìä ÊîπÂñÑÂäπÊûú„ÅÆÂàÜÊûê:');
    const improvements = {
      'ÂÖ∑‰ΩìÁöÑ„Å™Êï∞ÂÄ§„ÅÆÊ¥ªÁî®': concepts.some(c => 
        c.structure.mainContent.includes('56%') || 
        c.structure.mainContent.includes('ÂçäÊï∞') ||
        c.structure.mainContent.includes('10%„Åã„Çâ20%')
      ),
      'Ë®ò‰∫ã„ÅÆË©≥Á¥∞„Å∏„ÅÆË®ÄÂèä': concepts.some(c => 
        c.structure.mainContent.includes('„Éõ„ÉØ„Ç§„Éà„Ç´„É©„Éº') ||
        c.structure.mainContent.includes('„Ç®„É≥„Éà„É™„Éº„É¨„Éô„É´')
      ),
      '„É°„Éá„Ç£„Ç¢ÊÉÖÂ†±„ÅÆÊ¥ªÁî®': concepts.some(c => 
        c.structure.mainContent.includes('Independent') ||
        c.structure.background.includes('ÊúÄÊñ∞')
      ),
      'Ê∑±„ÅÑÊ¥ûÂØü„ÅÆÊèê‰æõ': concepts.every(c => 
        c.structure.mainContent.length > 100
      )
    };
    
    Object.entries(improvements).forEach(([improvement, achieved]) => {
      console.log(`${achieved ? '‚úÖ' : '‚ùå'} ${improvement}`);
    });
    
  } catch (error) {
    console.error('„Ç®„É©„Éº:', error);
  }
}

testGPTConceptsImproved();