generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BuzzPost {
  id               String          @id @default(uuid())
  postId           String          @unique @map("post_id")
  content          String
  authorUsername   String          @map("author_username")
  authorId         String          @map("author_id")
  likesCount       Int             @map("likes_count")
  retweetsCount    Int             @map("retweets_count")
  repliesCount     Int             @map("replies_count")
  impressionsCount Int             @map("impressions_count")
  postedAt         DateTime        @map("posted_at")
  collectedAt      DateTime        @default(now()) @map("collected_at")
  url              String
  theme            String
  language         String
  mediaUrls        Json            @map("media_urls")
  hashtags         Json
  chromaId         String?         @map("chroma_id")
  authorFollowers  Int?            @map("author_followers")
  authorFollowing  Int?            @map("author_following")
  authorVerified   Boolean?        @map("author_verified")
  scheduledPosts   ScheduledPost[]

  @@map("buzz_posts")
}

model ScheduledPost {
  id            String          @id @default(uuid())
  content       String
  scheduledTime DateTime        @map("scheduled_time")
  status        PostStatus      @default(DRAFT)
  postType      PostType        @map("post_type")
  refPostId     String?         @map("ref_post_id")
  templateType  String?         @map("template_type")
  aiGenerated   Boolean         @default(false) @map("ai_generated")
  aiPrompt      String?         @map("ai_prompt")
  editedContent String?         @map("edited_content")
  postedAt      DateTime?       @map("posted_at")
  postResult    Json?           @map("post_result")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  analytics     PostAnalytics[]
  refPost       BuzzPost?       @relation(fields: [refPostId], references: [id])

  @@map("scheduled_posts")
}

model PostAnalytics {
  id              String        @id @default(uuid())
  scheduledPostId String        @map("scheduled_post_id")
  impressions     Int
  likes           Int
  retweets        Int
  replies         Int
  profileClicks   Int           @map("profile_clicks")
  linkClicks      Int           @map("link_clicks")
  measuredAt      DateTime      @default(now()) @map("measured_at")
  engagementRate  Float         @map("engagement_rate")
  aiAnalysis      String?       @map("ai_analysis")
  scheduledPost   ScheduledPost @relation(fields: [scheduledPostId], references: [id])

  @@map("post_analytics")
}

model AiPattern {
  id             String   @id @default(uuid())
  name           String
  description    String
  promptTemplate String   @map("prompt_template")
  exampleOutput  String   @map("example_output")
  successRate    Float    @default(0) @map("success_rate")
  usageCount     Int      @default(0) @map("usage_count")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("ai_patterns")
}

model User {
  id             String          @id @default(uuid())
  twitterId      String          @unique @map("twitter_id")
  username       String
  name           String?
  email          String?
  image          String?
  accessToken    String          @map("access_token")
  refreshToken   String?         @map("refresh_token")
  tokenSecret    String?         @map("token_secret")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  sessions       Session[]
  watchlistUsers WatchlistUser[]

  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model NewsSource {
  id        String        @id @default(uuid())
  name      String
  url       String
  type      String
  category  String
  active    Boolean       @default(true)
  createdAt DateTime      @default(now()) @map("created_at")
  articles  NewsArticle[]

  @@map("news_sources")
}

model NewsArticle {
  id              String           @id @default(uuid())
  sourceId        String           @map("source_id")
  title           String
  summary         String
  content         String
  url             String           @unique
  publishedAt     DateTime         @map("published_at")
  category        String?
  importance      Float?
  processed       Boolean          @default(false)
  createdAt       DateTime         @default(now()) @map("created_at")
  metadata        Json?            @db.Json
  analysis        NewsAnalysis?
  source          NewsSource       @relation(fields: [sourceId], references: [id])
  newsThreadItems NewsThreadItem[]

  @@map("news_articles")
}

model NewsThread {
  id          String           @id @default(uuid())
  status      String           @default("draft")
  createdAt   DateTime         @default(now()) @map("created_at")
  metadata    Json?            @db.Json
  scheduledAt DateTime?        @map("scheduled_at")
  title       String
  postedAt    DateTime?        @map("posted_at")
  items       NewsThreadItem[]

  @@map("news_threads")
}

model NewsThreadItem {
  id            String       @id @default(uuid())
  threadId      String       @map("thread_id")
  articleId     String?      @map("article_id")
  tweetId       String?      @map("tweet_id")
  parentTweetId String?      @map("parent_tweet_id")
  postedAt      DateTime?    @map("posted_at")
  content       String
  metadata      Json?        @db.Json
  position      Int
  article       NewsArticle? @relation(fields: [articleId], references: [id])
  thread        NewsThread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("news_thread_items")
}

model NewsAnalysis {
  id              String      @id @default(uuid())
  articleId       String      @unique @map("article_id")
  category        String
  summary         String
  japaneseSummary String      @map("japanese_summary")
  keyPoints       String[]    @map("key_points")
  impact          String
  analyzedBy      String      @map("analyzed_by")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  article         NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([impact])
  @@map("news_analyses")
}

model JobQueue {
  id        String    @id @default(uuid())
  type      String
  status    String    @default("pending")
  payload   Json?     @db.Json
  result    Json?     @db.Json
  error     String?
  progress  Int       @default(0)
  total     Int?
  startedAt DateTime? @map("started_at")
  endedAt   DateTime? @map("ended_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([type, status])
  @@index([createdAt])
  @@map("job_queue")
}

model CollectionPreset {
  id          String   @id @default(uuid())
  name        String
  description String?
  query       String
  keywords    String[]
  minLikes    Int      @default(100)
  minRetweets Int      @default(50)
  language    String   @default("ja")
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("collection_presets")
}

model WatchlistUser {
  id             String           @id @default(uuid())
  twitterId      String           @unique @map("twitter_id")
  username       String
  displayName    String           @map("display_name")
  profileImage   String?          @map("profile_image")
  bio            String?
  followersCount Int              @default(0) @map("followers_count")
  category       String[]
  notes          String?
  priority       Int              @default(0)
  isFollowing    Boolean          @default(false) @map("is_following")
  addedAt        DateTime         @default(now()) @map("added_at")
  lastChecked    DateTime?        @map("last_checked")
  userId         String           @map("user_id")
  tweets         WatchlistTweet[]
  user           User             @relation(fields: [userId], references: [id])

  @@unique([userId, username])
  @@map("watchlist_users")
}

model WatchlistTweet {
  id               String        @id @default(uuid())
  tweetId          String        @unique @map("tweet_id")
  watchlistUserId  String        @map("watchlist_user_id")
  content          String
  likesCount       Int           @map("likes_count")
  retweetsCount    Int           @map("retweets_count")
  repliesCount     Int           @map("replies_count")
  impressionsCount Int           @map("impressions_count")
  hasReplied       Boolean       @default(false) @map("has_replied")
  hasQuoted        Boolean       @default(false) @map("has_quoted")
  postedAt         DateTime      @map("posted_at")
  collectedAt      DateTime      @default(now()) @map("collected_at")
  url              String
  mediaUrls        Json?         @map("media_urls")
  watchlistUser    WatchlistUser @relation(fields: [watchlistUserId], references: [id], map: "watchlist_tweets_user_id_fkey")

  @@map("watchlist_tweets")
}

model InteractionHistory {
  id            String   @id @default(uuid())
  type          String
  sourceTweetId String   @map("source_tweet_id")
  targetTweetId String?  @map("target_tweet_id")
  content       String?
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("interaction_history")
}

enum PostStatus {
  DRAFT
  SCHEDULED
  POSTED
  FAILED
}

enum PostType {
  NEW
  RETWEET
  QUOTE
}

model PerplexityReport {
  id                 String   @id @default(uuid())
  query              String
  focus              String
  rawAnalysis        String   @db.Text
  trends             Json
  insights           Json
  personalAngles     Json     @map("personal_angles")
  buzzPrediction     Float    @map("buzz_prediction")
  recommendations    Json
  metadata           Json
  createdAt          DateTime @default(now()) @map("created_at")
  
  @@index([createdAt])
  @@map("perplexity_reports")
}

// バイラルコンテンツ自動生成システム用モデル

model ViralOpportunity {
  id              String   @id @default(uuid())
  topic           String   // トレンドトピック
  platform        String   // Twitter, TikTok等
  viralScore      Float    // バズポテンシャル（0-1）
  timeWindow      Int      // 投稿までの残り時間（時間）
  angle           String   // コンテンツアングル
  keywords        String[] // 関連キーワード
  sourceData      Json     // 元データ（ニュース、トレンド等）
  status          String   // identified, analyzed, generated, posted
  analyzedAt      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  posts           ViralPost[]
  
  @@index([platform, status])
  @@index([viralScore])
  @@map("viral_opportunities")
}

model ViralPost {
  id              String   @id @default(uuid())
  opportunityId   String   @map("opportunity_id")
  conceptType     String   // concept1, concept2, concept3
  content         String   @db.Text // 投稿内容
  threadContent   Json?    // スレッドの場合の全内容
  visualGuide     String?  // ビジュアル作成ガイド
  hashtags        String[] // ハッシュタグ
  postType        String   // single, thread, reply
  platform        String   // Twitter等
  
  scheduledAt     DateTime? @map("scheduled_at")
  postedAt        DateTime? @map("posted_at")
  postUrl         String?   @map("post_url")
  
  performance     ViralPostPerformance?
  opportunity     ViralOpportunity @relation(fields: [opportunityId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([opportunityId])
  @@index([scheduledAt])
  @@map("viral_posts")
}

model ViralPostPerformance {
  id              String   @id @default(uuid())
  postId          String   @unique @map("post_id")
  
  // 初動メトリクス（30分後）
  impressions30m  Int?     @map("impressions_30m")
  likes30m        Int?     @map("likes_30m")
  retweets30m     Int?     @map("retweets_30m")
  comments30m     Int?     @map("comments_30m")
  
  // 1時間後メトリクス
  impressions1h   Int?     @map("impressions_1h")
  likes1h         Int?     @map("likes_1h")
  retweets1h      Int?     @map("retweets_1h")
  comments1h      Int?     @map("comments_1h")
  
  // 24時間後メトリクス
  impressions24h  Int?     @map("impressions_24h")
  likes24h        Int?     @map("likes_24h")
  retweets24h     Int?     @map("retweets_24h")
  comments24h     Int?     @map("comments_24h")
  followers24h    Int?     @map("followers_24h") // フォロワー増加数
  
  engagementRate  Float?   @map("engagement_rate")
  viralCoeff      Float?   @map("viral_coefficient") // バイラル係数
  
  post            ViralPost @relation(fields: [postId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("viral_post_performance")
}

model ViralAnalysisLog {
  id              String   @id @default(uuid())
  model           String   // chatgpt, claude
  phase           String   // trend_analysis, content_generation等
  prompt          String   @db.Text
  response        Json
  tokens          Int?
  duration        Int?     // ミリ秒
  success         Boolean
  error           String?
  
  createdAt       DateTime @default(now())
  
  @@index([model, phase])
  @@map("viral_analysis_logs")
}

model ViralConfig {
  id              String   @id @default(uuid())
  key             String   @unique
  value           Json
  description     String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("viral_config")
}
