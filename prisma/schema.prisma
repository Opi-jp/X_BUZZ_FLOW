generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  engineType    = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model accounts {
  id                  String  @id @default(dbgenerated("gen_random_uuid()"))
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_account_id])
  @@index([user_id])
}

model ai_patterns {
  id              String   @id
  name            String
  description     String
  prompt_template String
  example_output  String
  success_rate    Float    @default(0)
  usage_count     Int      @default(0)
  created_at      DateTime @default(now())
}

model api_error_logs {
  id              String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  endpoint        String
  method          String
  status_code     Int
  error_message   String?
  stack_trace     String?
  request_body    Json?
  request_headers Json?
  user_agent      String?
  ip_address      String?
  created_at      DateTime @default(now())

  @@index([created_at])
  @@index([endpoint])
  @@index([status_code])
}

model api_tasks {
  id           String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  type         String
  session_id   String
  phase_number Int
  step_name    String
  request      Json
  status       String    @default("QUEUED")
  retry_count  Int       @default(0)
  response     Json?
  error        String?
  created_at   DateTime  @default(now())
  started_at   DateTime?
  completed_at DateTime?
  task_type    String    @default("unknown")

  @@index([session_id], map: "idx_api_tasks_session_id")
  @@index([status], map: "idx_api_tasks_status")
}

model buzz_config {
  id               String   @id
  keywords         String[] @default([])
  accounts         String[] @default([])
  min_engagement   Int      @default(1000)
  min_impressions  Int      @default(5000)
  collect_interval Int      @default(60)
  enabled          Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())
}

model buzz_posts {
  id                String            @id
  post_id           String            @unique
  content           String
  author_username   String
  author_id         String
  likes_count       Int
  retweets_count    Int
  replies_count     Int
  impressions_count Int
  posted_at         DateTime
  collected_at      DateTime          @default(now())
  url               String
  theme             String
  language          String
  media_urls        Json
  hashtags          Json
  chroma_id         String?
  author_followers  Int?
  author_following  Int?
  author_verified   Boolean?
  scheduled_posts   scheduled_posts[]
}

model character_profiles {
  id                        String   @id
  name                      String   @unique
  display_name              String
  age                       Int
  gender                    Gender
  occupation                String
  catchphrase               String
  personality               String
  speaking_style            String
  expertise                 String
  backstory                 String
  philosophy                String?
  tone                      String
  voice_style               Json
  emoji_style               String
  created_at                DateTime @default(now())
  updated_at                DateTime @default(now())
  preferred_news_categories String[] @default([])
  news_comment_style        Json?
  topic_expertise           Json?
}

model collection_presets {
  id          String   @id
  name        String
  description String?
  query       String
  keywords    String[]
  minLikes    Int      @default(100)
  minRetweets Int      @default(50)
  language    String   @default("ja")
  category    String
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model content_drafts {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  analysis_id          String       @db.Uuid
  concept_type         String       @db.VarChar(255)
  category             String       @db.VarChar(255)
  title                String
  content              String
  edited_content       String?
  explanation          String?
  buzz_factors         Json?        @default("[]")
  target_audience      String?
  estimated_engagement Json?        @default("{}")
  hashtags             Json?        @default("[]")
  visual_guide         String?
  platform             String?      @default("Twitter") @db.VarChar(50)
  format               String?      @default("single") @db.VarChar(50)
  status               String?      @default("draft") @db.VarChar(50)
  editor_notes         String?
  metadata             Json?
  created_at           DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?    @default(now()) @db.Timestamptz(6)
  gpt_analyses         gpt_analyses @relation(fields: [analysis_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([analysis_id, status])
  @@index([concept_type, category])
  @@index([analysis_id], map: "idx_content_drafts_analysis")
  @@index([analysis_id, status], map: "idx_content_drafts_status")
  @@index([concept_type, category], map: "idx_content_drafts_type")
}

model cot_draft_performance {
  id                String     @id @default(dbgenerated("(gen_random_uuid())::text"))
  draft_id          String     @unique
  likes_30m         Int?
  retweets_30m      Int?
  replies_30m       Int?
  impressions_30m   Int?
  likes_1h          Int?
  retweets_1h       Int?
  replies_1h        Int?
  impressions_1h    Int?
  likes_24h         Int?
  retweets_24h      Int?
  replies_24h       Int?
  impressions_24h   Int?
  engagement_rate   Float?
  viral_coefficient Float?
  collected_at      DateTime   @default(now())
  last_update_at    DateTime   @default(now())
  cot_drafts        cot_drafts @relation(fields: [draft_id], references: [id], onDelete: Cascade)
}

model cot_drafts {
  id                    String                 @id @default(dbgenerated("(gen_random_uuid())::text"))
  session_id            String
  concept_number        Int
  title                 String
  hook                  String
  angle                 String
  format                String
  content               String?
  thread_content        Json?
  visual_guide          String?
  timing                String
  hashtags              String[]
  news_source           String?
  source_url            String?
  kpis                  Json?
  risk_assessment       Json?
  optimization_tips     Json?
  status                cot_draft_status       @default(DRAFT)
  edited_content        String?
  scheduled_at          DateTime?
  posted_at             DateTime?
  post_id               String?
  viral_score           Float?
  created_at            DateTime               @default(now())
  updated_at            DateTime               @default(now())
  cot_draft_performance cot_draft_performance?
  cot_sessions          cot_sessions           @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@unique([session_id, concept_number])
  @@index([scheduled_at])
  @@index([session_id])
  @@index([status])
}

model cot_phases {
  id               String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  session_id       String
  phase_number     Int
  think_prompt     String?
  think_result     Json?
  think_tokens     Int?             @default(0)
  think_at         DateTime?
  execute_result   Json?
  execute_duration Int?             @default(0)
  execute_at       DateTime?
  integrate_prompt String?
  integrate_result Json?
  integrate_tokens Int?             @default(0)
  integrate_at     DateTime?
  status           cot_phase_status @default(PENDING)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  cot_sessions     cot_sessions     @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@unique([session_id, phase_number])
  @@index([session_id, phase_number])
}

model cot_sessions {
  id             String             @id @default(dbgenerated("(gen_random_uuid())::text"))
  theme          String
  style          String
  platform       String
  status         cot_session_status @default(PENDING)
  current_phase  Int                @default(1)
  current_step   cot_phase_step     @default(THINK)
  last_error     String?
  retry_count    Int                @default(0)
  next_retry_at  DateTime?
  total_tokens   Int                @default(0)
  total_duration Int                @default(0)
  created_at     DateTime           @default(now())
  updated_at     DateTime           @default(now())
  completed_at   DateTime?
  metadata       Json?
  cot_drafts     cot_drafts[]
  cot_phases     cot_phases[]

  @@index([current_phase, current_step])
  @@index([status, created_at])
}

model gpt_analyses {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  analysis_type  String           @db.VarChar(255)
  prompt         String
  response       Json             @default("{}")
  tokens         Int?
  duration       Int?
  metadata       Json?
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  content_drafts content_drafts[]

  @@index([analysis_type])
  @@index([created_at], map: "idx_gpt_analyses_created")
  @@index([analysis_type], map: "idx_gpt_analyses_type")
}

model interaction_history {
  id              String   @id
  type            String
  source_tweet_id String
  target_tweet_id String?
  content         String?
  created_at      DateTime @default(now())
}

model job_queue {
  id         String    @id
  type       String
  status     String    @default("pending")
  payload    Json?     @db.Json
  result     Json?     @db.Json
  error      String?
  progress   Int       @default(0)
  total      Int?
  started_at DateTime?
  ended_at   DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime

  @@index([created_at])
  @@index([type, status])
}

model news_analyses {
  id               String        @id
  article_id       String        @unique
  category         String
  summary          String
  japanese_summary String
  key_points       String[]
  impact           String
  analyzed_by      String
  created_at       DateTime      @default(now())
  updated_at       DateTime
  news_articles    news_articles @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([impact])
}

model news_analysis_jobs {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()"))
  type                  String
  status                String                  @default("pending")
  started_at            DateTime?
  completed_at          DateTime?
  error                 String?
  result                Json?
  metadata              Json?
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())
  news_analysis_results news_analysis_results[]

  @@index([status])
  @@index([type])
}

model news_analysis_results {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  job_id             String
  article_id         String
  importance_score   Float
  category           String
  summary_ja         String
  key_points         Json
  impact_assessment  String
  expert_perspective String?
  metadata           Json?
  created_at         DateTime           @default(now())
  news_articles      news_articles      @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  news_analysis_jobs news_analysis_jobs @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([article_id])
  @@index([importance_score(sort: Desc)])
  @@index([job_id])
}

model news_articles {
  id                    String                  @id
  source_id             String
  title                 String
  summary               String
  content               String
  url                   String                  @unique
  published_at          DateTime
  category              String?
  importance            Float?
  processed             Boolean                 @default(false)
  created_at            DateTime                @default(now())
  metadata              Json?                   @db.Json
  news_analyses         news_analyses?
  news_analysis_results news_analysis_results[]
  news_sources          news_sources            @relation(fields: [source_id], references: [id])
  news_thread_items     news_thread_items[]
}

model news_sources {
  id            String          @id
  name          String
  url           String
  type          String
  category      String
  active        Boolean         @default(true)
  created_at    DateTime        @default(now())
  news_articles news_articles[]
}

model news_thread_items {
  id              String         @id
  thread_id       String
  article_id      String?
  tweet_id        String?
  parent_tweet_id String?
  posted_at       DateTime?
  content         String
  metadata        Json?          @db.Json
  position        Int
  news_articles   news_articles? @relation(fields: [article_id], references: [id])
  news_threads    news_threads   @relation(fields: [thread_id], references: [id], onDelete: Cascade)
}

model news_threads {
  id                String              @id
  status            String              @default("draft")
  created_at        DateTime            @default(now())
  metadata          Json?               @db.Json
  scheduled_at      DateTime?
  title             String
  posted_at         DateTime?
  news_thread_items news_thread_items[]
}

model news_viral_relations {
  id              String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  news_id         String
  session_id      String
  relevance_score Float?
  used_in_content Boolean  @default(false)
  created_at      DateTime @default(now())

  @@unique([news_id, session_id], map: "news_viral_relations_unique")
}

model perplexity_reports {
  id              String   @id
  query           String
  focus           String
  rawAnalysis     String
  trends          Json
  insights        Json
  personal_angles Json
  buzz_prediction Float
  recommendations Json
  metadata        Json
  created_at      DateTime @default(now())

  @@index([created_at])
}

model post_analytics {
  id                String          @id
  scheduled_post_id String
  impressions       Int
  likes             Int
  retweets          Int
  replies           Int
  profile_clicks    Int
  link_clicks       Int
  measured_at       DateTime        @default(now())
  engagement_rate   Float
  ai_analysis       String?
  scheduled_posts   scheduled_posts @relation(fields: [scheduled_post_id], references: [id])
}

model prompt_templates {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(255)
  type       String    @db.VarChar(255)
  template   String
  variables  Json      @default("[]")
  is_active  Boolean?  @default(true)
  metadata   Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([type, is_active], map: "idx_prompt_templates_type")
  @@index([type, is_active])
}

model scheduled_posts {
  id             String           @id
  content        String
  scheduled_time DateTime
  status         PostStatus       @default(DRAFT)
  post_type      PostType
  ref_post_id    String?
  template_type  String?
  ai_generated   Boolean          @default(false)
  ai_prompt      String?
  edited_content String?
  posted_at      DateTime?
  post_result    Json?
  created_at     DateTime         @default(now())
  updated_at     DateTime
  post_analytics post_analytics[]
  buzz_posts     buzz_posts?      @relation(fields: [ref_post_id], references: [id])
}

model scheduled_retweets {
  id               String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  original_post_id String
  original_content String
  scheduled_at     DateTime
  status           rt_status @default(SCHEDULED)
  rt_strategy      String
  add_comment      Boolean   @default(false)
  comment_text     String?
  viral_draft_id   String?
  cot_draft_id     String?
  executed_at      DateTime?
  rt_post_id       String?
  error            String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())

  @@index([original_post_id])
  @@index([status, scheduled_at])
}

model session_activity_logs {
  id            String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  session_id    String
  session_type  String
  activity_type String
  details       Json?
  created_at    DateTime @default(now())

  @@index([created_at])
  @@index([session_id])
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  created_at    DateTime @default(now())
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model unified_performance {
  id                String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  content_id        String   @unique
  content_type      String
  metrics_30m       Json?
  metrics_1h        Json?
  metrics_24h       Json?
  engagement_rate   Float?
  viral_coefficient Float?
  collected_at      DateTime @default(now())
  updated_at        DateTime @default(now())
}

model users {
  id              String            @id
  twitter_id      String            @unique
  username        String
  name            String?
  email           String?
  image           String?
  access_token    String
  refresh_token   String?
  token_secret    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  accounts        accounts[]
  sessions        sessions[]
  watchlist_users watchlist_users[]
}

model viral_analysis_logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model      String
  phase      String
  prompt     String
  response   Json      @default("{}")
  tokens     Int?
  duration   Int?
  success    Boolean
  error      String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([model, phase], map: "idx_viral_analysis_logs_model_phase")
}

model viral_config {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique
  value       Json      @default("{}")
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model viral_draft_performance {
  id                String          @id @default(dbgenerated("(gen_random_uuid())::text"))
  draft_id          String          @unique
  likes_30m         Int?
  retweets_30m      Int?
  replies_30m       Int?
  impressions_30m   Int?
  likes_1h          Int?
  retweets_1h       Int?
  replies_1h        Int?
  impressions_1h    Int?
  likes_24h         Int?
  retweets_24h      Int?
  replies_24h       Int?
  impressions_24h   Int?
  engagement_rate   Float?
  viral_coefficient Float?
  collected_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime        @default(now()) @db.Timestamptz(6)
  viral_drafts_v2   viral_drafts_v2 @relation(fields: [draft_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_draft")
}

model viral_drafts_v2 {
  id                      String                   @id @default(dbgenerated("(gen_random_uuid())::text"))
  session_id              String
  concept_id              String
  title                   String
  content                 String
  hashtags                String[]
  visual_note             String?
  status                  String                   @default("DRAFT")
  scheduled_at            DateTime?                @db.Timestamptz(6)
  posted_at               DateTime?                @db.Timestamptz(6)
  tweet_id                String?
  created_at              DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at              DateTime                 @default(now()) @db.Timestamptz(6)
  character_id            String?
  character_note          String?
  source_url              String?
  news_article_id         String?
  viral_draft_performance viral_draft_performance?
  viral_sessions          viral_sessions           @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_session")

  @@index([scheduled_at], map: "idx_viral_drafts_v2_scheduled_at")
  @@index([session_id], map: "idx_viral_drafts_v2_session_id")
  @@index([status], map: "idx_viral_drafts_v2_status")
}

model viral_opportunities {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topic       String
  platform    String
  viral_score Float
  time_window Int
  angle       String
  keywords    String[]      @default([])
  source_data Json?         @default("{}")
  status      String
  analyzed_at DateTime      @db.Timestamptz(6)
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?     @default(now()) @db.Timestamptz(6)
  viral_posts viral_posts[]

  @@index([platform, status], map: "idx_viral_opportunities_platform_status")
  @@index([viral_score], map: "idx_viral_opportunities_viral_score")
}

model viral_post_performance {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id           String      @unique @db.Uuid
  impressions_30m   Int?
  likes_30m         Int?
  retweets_30m      Int?
  comments_30m      Int?
  impressions_1h    Int?
  likes_1h          Int?
  retweets_1h       Int?
  comments_1h       Int?
  impressions_24h   Int?
  likes_24h         Int?
  retweets_24h      Int?
  comments_24h      Int?
  followers_24h     Int?
  engagement_rate   Float?
  viral_coefficient Float?
  created_at        DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?   @default(now()) @db.Timestamptz(6)
  viral_posts       viral_posts @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model viral_posts {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  opportunity_id         String                  @db.Uuid
  concept_type           String
  content                String
  thread_content         Json?
  visual_guide           String?
  hashtags               String[]                @default([])
  post_type              String
  platform               String
  scheduled_at           DateTime?               @db.Timestamptz(6)
  posted_at              DateTime?               @db.Timestamptz(6)
  post_url               String?
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @default(now()) @db.Timestamptz(6)
  viral_post_performance viral_post_performance?
  viral_opportunities    viral_opportunities     @relation(fields: [opportunity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([opportunity_id], map: "idx_viral_posts_opportunity_id")
  @@index([scheduled_at], map: "idx_viral_posts_scheduled_at")
}

model viral_sessions {
  id                   String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  theme                String
  platform             String
  style                String
  status               String            @default("CREATED")
  created_at           DateTime          @default(now()) @db.Timestamptz(6)
  topics               Json?
  concepts             Json?
  selected_ids         String[]          @default([])
  contents             Json?
  character_profile_id String?
  voice_style_mode     String?
  viral_drafts_v2      viral_drafts_v2[]

  @@index([status], map: "idx_viral_sessions_status")
}

model watchlist_tweets {
  id                String          @id
  tweet_id          String          @unique
  watchlist_user_id String
  content           String
  likes_count       Int
  retweets_count    Int
  replies_count     Int
  impressions_count Int
  has_replied       Boolean         @default(false)
  has_quoted        Boolean         @default(false)
  posted_at         DateTime
  collected_at      DateTime        @default(now())
  url               String
  media_urls        Json?
  watchlist_users   watchlist_users @relation(fields: [watchlist_user_id], references: [id], map: "watchlist_tweets_user_id_fkey")
}

model watchlist_users {
  id               String             @id
  twitter_id       String             @unique
  username         String
  display_name     String
  profile_image    String?
  bio              String?
  followers_count  Int                @default(0)
  category         String[]
  notes            String?
  priority         Int                @default(0)
  is_following     Boolean            @default(false)
  added_at         DateTime           @default(now())
  last_checked     DateTime?
  user_id          String
  watchlist_tweets watchlist_tweets[]
  users            users              @relation(fields: [user_id], references: [id])

  @@unique([user_id, username])
}

enum Gender {
  male
  female
  other
}

enum PostStatus {
  DRAFT
  SCHEDULED
  POSTED
  FAILED
}

enum PostType {
  NEW
  RETWEET
  QUOTE
}

enum cot_draft_status {
  DRAFT
  EDITED
  SCHEDULED
  POSTED
  ARCHIVED
}

enum cot_phase_status {
  PENDING
  THINKING
  EXECUTING
  INTEGRATING
  COMPLETED
  FAILED
}

enum cot_phase_step {
  THINK
  EXECUTE
  INTEGRATE
}

enum cot_session_status {
  PENDING
  THINKING
  EXECUTING
  INTEGRATING
  COMPLETED
  FAILED
  PAUSED
}

enum draft_status {
  DRAFT
  EDITED
  SCHEDULED
  POSTED
  CANCELLED
}

enum rt_status {
  SCHEDULED
  EXECUTED
  FAILED
  CANCELLED
}
