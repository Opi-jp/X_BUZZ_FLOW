generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BuzzPost {
  id               String          @id @default(uuid())
  postId           String          @unique @map("post_id")
  content          String
  authorUsername   String          @map("author_username")
  authorId         String          @map("author_id")
  authorFollowers  Int?            @map("author_followers") // 追加
  authorFollowing  Int?            @map("author_following") // 追加
  authorVerified   Boolean?        @map("author_verified") // 追加
  likesCount       Int             @map("likes_count")
  retweetsCount    Int             @map("retweets_count")
  repliesCount     Int             @map("replies_count")
  impressionsCount Int             @map("impressions_count")
  postedAt         DateTime        @map("posted_at")
  collectedAt      DateTime        @default(now()) @map("collected_at")
  url              String
  theme            String
  language         String
  mediaUrls        Json            @map("media_urls")
  hashtags         Json
  chromaId         String?         @map("chroma_id")
  scheduledPosts   ScheduledPost[]

  @@map("buzz_posts")
}

model ScheduledPost {
  id            String          @id @default(uuid())
  content       String
  scheduledTime DateTime        @map("scheduled_time")
  status        PostStatus      @default(DRAFT)
  postType      PostType        @map("post_type")
  refPostId     String?         @map("ref_post_id")
  templateType  String?         @map("template_type")
  aiGenerated   Boolean         @default(false) @map("ai_generated")
  aiPrompt      String?         @map("ai_prompt")
  editedContent String?         @map("edited_content")
  postedAt      DateTime?       @map("posted_at")
  postResult    Json?           @map("post_result")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  analytics     PostAnalytics[]
  refPost       BuzzPost?       @relation(fields: [refPostId], references: [id])

  @@map("scheduled_posts")
}

model PostAnalytics {
  id              String        @id @default(uuid())
  scheduledPostId String        @map("scheduled_post_id")
  impressions     Int
  likes           Int
  retweets        Int
  replies         Int
  profileClicks   Int           @map("profile_clicks")
  linkClicks      Int           @map("link_clicks")
  measuredAt      DateTime      @default(now()) @map("measured_at")
  engagementRate  Float         @map("engagement_rate")
  aiAnalysis      String?       @map("ai_analysis")
  scheduledPost   ScheduledPost @relation(fields: [scheduledPostId], references: [id])

  @@map("post_analytics")
}

model AiPattern {
  id             String   @id @default(uuid())
  name           String
  description    String
  promptTemplate String   @map("prompt_template")
  exampleOutput  String   @map("example_output")
  successRate    Float    @default(0) @map("success_rate")
  usageCount     Int      @default(0) @map("usage_count")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("ai_patterns")
}

model User {
  id           String    @id @default(uuid())
  twitterId    String    @unique @map("twitter_id")
  username     String
  name         String?
  email        String?
  image        String?
  accessToken  String    @map("access_token")
  refreshToken String?   @map("refresh_token")
  tokenSecret  String?   @map("token_secret")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  sessions     Session[]
  watchlistUsers WatchlistUser[]

  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model NewsSource {
  id        String        @id @default(uuid())
  name      String
  url       String
  type      String
  category  String
  active    Boolean       @default(true)
  createdAt DateTime      @default(now()) @map("created_at")
  articles  NewsArticle[]

  @@map("news_sources")
}

model NewsArticle {
  id              String           @id @default(uuid())
  sourceId        String           @map("source_id")
  title           String
  summary         String
  content         String
  url             String           @unique
  publishedAt     DateTime         @map("published_at")
  category        String?
  importance      Float?
  processed       Boolean          @default(false)
  createdAt       DateTime         @default(now()) @map("created_at")
  metadata        Json?            @db.Json
  source          NewsSource       @relation(fields: [sourceId], references: [id])
  newsThreadItems NewsThreadItem[]
  analysis        NewsAnalysis?

  @@map("news_articles")
}

model NewsThread {
  id          String           @id @default(uuid())
  status      String           @default("draft")
  createdAt   DateTime         @default(now()) @map("created_at")
  metadata    Json?            @db.Json
  scheduledAt DateTime?        @map("scheduled_at")
  title       String
  postedAt    DateTime?        @map("posted_at")
  items       NewsThreadItem[]

  @@map("news_threads")
}

model NewsThreadItem {
  id            String       @id @default(uuid())
  threadId      String       @map("thread_id")
  articleId     String?      @map("article_id")
  tweetId       String?      @map("tweet_id")
  parentTweetId String?      @map("parent_tweet_id")
  postedAt      DateTime?    @map("posted_at")
  content       String
  metadata      Json?        @db.Json
  position      Int
  article       NewsArticle? @relation(fields: [articleId], references: [id])
  thread        NewsThread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("news_thread_items")
}

// 分析結果専用テーブル
model NewsAnalysis {
  id              String      @id @default(uuid())
  articleId       String      @unique @map("article_id")
  article         NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category        String      // 'research', 'product', 'business', 'regulation', 'opinion', 'other'
  summary         String      @db.Text
  japaneseSummary String      @map("japanese_summary") @db.Text
  keyPoints       String[]    @map("key_points") // PostgreSQL配列型
  impact          String      // 'low', 'medium', 'high'
  analyzedBy      String      @map("analyzed_by") // 'claude', 'basic', 'manual'
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@index([category])
  @@index([impact])
  @@map("news_analyses")
}

// ジョブキューテーブル  
model JobQueue {
  id        String   @id @default(uuid())
  type      String   // 'collect_rss', 'collect_twitter', 'analyze_batch', 'generate_thread'
  status    String   @default("pending") // 'pending', 'processing', 'completed', 'failed'
  payload   Json?    @db.Json // ジョブの入力パラメータ
  result    Json?    @db.Json // ジョブの実行結果
  error     String?  @db.Text
  progress  Int      @default(0) // 進捗率 0-100
  total     Int?     // 総アイテム数
  startedAt DateTime? @map("started_at")
  endedAt   DateTime? @map("ended_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([type, status])
  @@index([createdAt])
  @@map("job_queue")
}

enum PostStatus {
  DRAFT
  SCHEDULED
  POSTED
  FAILED
}

enum PostType {
  NEW
  RETWEET
  QUOTE
}

// 収集クエリのプリセット
model CollectionPreset {
  id          String   @id @default(uuid())
  name        String
  description String?
  query       String   // Kaito API用のクエリ
  keywords    String[] // キーワード配列
  minLikes    Int      @default(100)
  minRetweets Int      @default(50)
  language    String   @default("ja")
  category    String   // AI, Tech, News, etc
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("collection_presets")
}

// ウォッチリスト（フォローすべき人）
model WatchlistUser {
  id            String   @id @default(uuid())
  userId        String   @map("user_id") // 追加: ウォッチリストを作成したユーザー
  twitterId     String   @map("twitter_id")
  username      String
  displayName   String   @map("display_name")
  profileImage  String?  @map("profile_image")
  bio           String?
  followersCount Int     @default(0) @map("followers_count")
  category      String[] // AI研究者, インフルエンサー, etc
  notes         String?  // メモ
  priority      Int      @default(0) // 優先度
  isFollowing   Boolean  @default(false) @map("is_following")
  addedAt       DateTime @default(now()) @map("added_at")
  lastChecked   DateTime? @map("last_checked")
  user          User     @relation(fields: [userId], references: [id])
  tweets        WatchlistTweet[]

  @@unique([userId, username]) // 同じユーザーが同じアカウントを重複登録できないように
  @@map("watchlist_users")
}

// ウォッチリストユーザーのツイート
model WatchlistTweet {
  id              String   @id @default(uuid())
  tweetId         String   @unique @map("tweet_id")
  watchlistUserId String   @map("watchlist_user_id")
  content         String
  likesCount      Int      @map("likes_count")
  retweetsCount   Int      @map("retweets_count")
  repliesCount    Int      @map("replies_count")
  impressionsCount Int     @map("impressions_count")
  hasReplied      Boolean  @default(false) @map("has_replied")
  hasQuoted       Boolean  @default(false) @map("has_quoted")
  postedAt        DateTime @map("posted_at")
  collectedAt     DateTime @default(now()) @map("collected_at")
  url             String
  mediaUrls       Json?    @map("media_urls")
  watchlistUser   WatchlistUser @relation(fields: [watchlistUserId], references: [id])

  @@map("watchlist_tweets")
}

// インタラクション履歴
model InteractionHistory {
  id            String   @id @default(uuid())
  type          String   // reply, quote, like, retweet
  sourceTweetId String   @map("source_tweet_id")
  targetTweetId String?  @map("target_tweet_id") // リプライ先
  content       String?  // リプライや引用RTの内容
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("interaction_history")
}
