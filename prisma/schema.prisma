generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  engineType    = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BuzzPost {
  id               String          @id @default(uuid())
  postId           String          @unique @map("post_id")
  content          String
  authorUsername   String          @map("author_username")
  authorId         String          @map("author_id")
  likesCount       Int             @map("likes_count")
  retweetsCount    Int             @map("retweets_count")
  repliesCount     Int             @map("replies_count")
  impressionsCount Int             @map("impressions_count")
  postedAt         DateTime        @map("posted_at")
  collectedAt      DateTime        @default(now()) @map("collected_at")
  url              String
  theme            String
  language         String
  mediaUrls        Json            @map("media_urls")
  hashtags         Json
  chromaId         String?         @map("chroma_id")
  authorFollowers  Int?            @map("author_followers")
  authorFollowing  Int?            @map("author_following")
  authorVerified   Boolean?        @map("author_verified")
  scheduledPosts   ScheduledPost[]

  @@map("buzz_posts")
}

model BuzzConfig {
  id              String   @id
  keywords        String[] @default([])
  accounts        String[] @default([])
  minEngagement   Int      @default(1000) @map("min_engagement")
  minImpressions  Int      @default(5000) @map("min_impressions")
  collectInterval Int      @default(60) @map("collect_interval")
  enabled         Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("buzz_config")
}

model ScheduledPost {
  id             String          @id @default(uuid())
  content        String
  scheduledTime  DateTime        @map("scheduled_time")
  status         PostStatus      @default(DRAFT)
  postType       PostType        @map("post_type")
  refPostId      String?         @map("ref_post_id")
  templateType   String?         @map("template_type")
  aiGenerated    Boolean         @default(false) @map("ai_generated")
  aiPrompt       String?         @map("ai_prompt")
  editedContent  String?         @map("edited_content")
  postedAt       DateTime?       @map("posted_at")
  postResult     Json?           @map("post_result")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  post_analytics PostAnalytics[]
  refPost        BuzzPost?       @relation(fields: [refPostId], references: [id])

  @@map("scheduled_posts")
}

model PostAnalytics {
  id                String        @id @default(uuid())
  scheduled_post_id String
  impressions       Int
  likes             Int
  retweets          Int
  replies           Int
  profileClicks     Int           @map("profile_clicks")
  link_clicks       Int
  measured_at       DateTime      @default(now())
  engagementRate    Float         @map("engagement_rate")
  ai_analysis       String?
  scheduled_posts   ScheduledPost @relation(fields: [scheduled_post_id], references: [id])

  @@map("post_analytics")
}

model User {
  id             String          @id @default(uuid())
  twitterId      String          @unique @map("twitter_id")
  username       String
  name           String?
  email          String?
  image          String?
  accessToken    String          @map("access_token")
  refreshToken   String?         @map("refresh_token")
  tokenSecret    String?         @map("token_secret")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  accounts       accounts[]
  sessions       Session[]
  watchlistUsers WatchlistUser[]

  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  created_at   DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model NewsSource {
  id        String        @id @default(uuid())
  name      String
  url       String
  type      String
  category  String
  active    Boolean       @default(true)
  createdAt DateTime      @default(now()) @map("created_at")
  articles  NewsArticle[]

  @@map("news_sources")
}

model NewsArticle {
  id                    String                  @id @default(uuid())
  sourceId              String                  @map("source_id")
  title                 String
  summary               String
  content               String
  url                   String                  @unique
  publishedAt           DateTime                @map("published_at")
  category              String?
  importance            Float?
  processed             Boolean                 @default(false)
  createdAt             DateTime                @default(now()) @map("created_at")
  metadata              Json?                   @db.Json
  analysis              NewsAnalysis?
  news_analysis_results news_analysis_results[]
  source                NewsSource              @relation(fields: [sourceId], references: [id])
  newsThreadItems       NewsThreadItem[]

  @@map("news_articles")
}

model NewsThread {
  id          String           @id @default(uuid())
  status      String           @default("draft")
  createdAt   DateTime         @default(now()) @map("created_at")
  metadata    Json?            @db.Json
  scheduledAt DateTime?        @map("scheduled_at")
  title       String
  postedAt    DateTime?        @map("posted_at")
  items       NewsThreadItem[]

  @@map("news_threads")
}

model NewsThreadItem {
  id              String       @id @default(uuid())
  threadId        String       @map("thread_id")
  articleId       String?      @map("article_id")
  tweet_id        String?
  parent_tweet_id String?
  posted_at       DateTime?
  content         String
  metadata        Json?        @db.Json
  position        Int
  article         NewsArticle? @relation(fields: [articleId], references: [id])
  thread          NewsThread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@map("news_thread_items")
}

model NewsAnalysis {
  id               String      @id @default(uuid())
  articleId        String      @unique @map("article_id")
  category         String
  summary          String
  japanese_summary String
  key_points       String[]
  impact           String
  analyzed_by      String
  createdAt        DateTime    @default(now()) @map("created_at")
  updated_at       DateTime
  article          NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([impact])
  @@map("news_analyses")
}

model JobQueue {
  id         String    @id @default(uuid())
  type       String
  status     String    @default("pending")
  payload    Json?     @db.Json
  result     Json?     @db.Json
  error      String?
  progress   Int       @default(0)
  total      Int?
  started_at DateTime?
  ended_at   DateTime?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@index([createdAt])
  @@index([type, status])
  @@map("job_queue")
}

model ApiTask {
  id           String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  type         String
  sessionId    String    @map("session_id")
  phase_number Int
  step_name    String
  request      Json
  status       String    @default("QUEUED")
  retry_count  Int       @default(0)
  response     Json?
  error        String?
  createdAt    DateTime  @default(now()) @map("created_at")
  started_at   DateTime?
  completed_at DateTime?
  taskType     String    @default("unknown") @map("task_type")

  @@index([sessionId], map: "idx_api_tasks_session_id")
  @@index([status], map: "idx_api_tasks_status")
  @@map("api_tasks")
}

model CollectionPreset {
  id          String   @id @default(uuid())
  name        String
  description String?
  query       String
  keywords    String[]
  minLikes    Int      @default(100)
  minRetweets Int      @default(50)
  language    String   @default("ja")
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("collection_presets")
}

model WatchlistUser {
  id              String           @id @default(uuid())
  twitterId       String           @unique @map("twitter_id")
  username        String
  displayName     String           @map("display_name")
  profile_image   String?
  bio             String?
  followers_count Int              @default(0)
  category        String[]
  notes           String?
  priority        Int              @default(0)
  is_following    Boolean          @default(false)
  added_at        DateTime         @default(now())
  lastChecked     DateTime?        @map("last_checked")
  userId          String           @map("user_id")
  tweets          WatchlistTweet[]
  user            User             @relation(fields: [userId], references: [id])

  @@unique([userId, username])
  @@map("watchlist_users")
}

model WatchlistTweet {
  id                String        @id @default(uuid())
  tweetId           String        @unique @map("tweet_id")
  watchlistUserId   String        @map("watchlist_user_id")
  content           String
  likes_count       Int
  retweets_count    Int
  replies_count     Int
  impressions_count Int
  has_replied       Boolean       @default(false)
  has_quoted        Boolean       @default(false)
  posted_at         DateTime
  collectedAt       DateTime      @default(now()) @map("collected_at")
  url               String
  media_urls        Json?
  watchlistUser     WatchlistUser @relation(fields: [watchlistUserId], references: [id], map: "watchlist_tweets_user_id_fkey")

  @@map("watchlist_tweets")
}

model InteractionHistory {
  id              String   @id @default(uuid())
  type            String
  source_tweet_id String
  target_tweet_id String?
  content         String?
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("interaction_history")
}

model PerplexityReport {
  id              String   @id @default(uuid())
  query           String
  focus           String
  rawAnalysis     String
  trends          Json
  insights        Json
  personal_angles Json
  buzz_prediction Float
  recommendations Json
  metadata        Json
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@map("perplexity_reports")
}

model CotSession {
  id            String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  theme         String
  style         String
  platform      String
  status        CotSessionStatus @default(PENDING)
  currentPhase  Int              @default(1) @map("current_phase")
  currentStep   CotPhaseStep     @default(THINK) @map("current_step")
  lastError     String?          @map("last_error")
  retryCount    Int              @default(0) @map("retry_count")
  nextRetryAt   DateTime?        @map("next_retry_at")
  totalTokens   Int              @default(0) @map("total_tokens")
  totalDuration Int              @default(0) @map("total_duration")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @default(now()) @updatedAt @map("updated_at")
  completedAt   DateTime?        @map("completed_at")
  metadata      Json?
  drafts        CotDraft[]
  phases        CotPhase[]

  @@index([status, createdAt])
  @@index([currentPhase, currentStep])
  @@map("cot_sessions")
}

model CotPhase {
  id              String         @id @default(dbgenerated("(gen_random_uuid())::text"))
  sessionId       String         @map("session_id")
  phaseNumber     Int            @map("phase_number")
  thinkPrompt     String?        @map("think_prompt")
  thinkResult     Json?          @map("think_result")
  thinkTokens     Int?           @default(0) @map("think_tokens")
  thinkAt         DateTime?      @map("think_at")
  executeResult   Json?          @map("execute_result")
  executeDuration Int?           @default(0) @map("execute_duration")
  executeAt       DateTime?      @map("execute_at")
  integratePrompt String?        @map("integrate_prompt")
  integrateResult Json?          @map("integrate_result")
  integrateTokens Int?           @default(0) @map("integrate_tokens")
  integrateAt     DateTime?      @map("integrate_at")
  status          CotPhaseStatus @default(PENDING)
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map("updated_at")
  session         CotSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, phaseNumber])
  @@index([sessionId, phaseNumber])
  @@map("cot_phases")
}

model CotDraft {
  id               String               @id @default(dbgenerated("(gen_random_uuid())::text"))
  sessionId        String               @map("session_id")
  conceptNumber    Int                  @map("concept_number")
  title            String
  hook             String
  angle            String
  format           String
  content          String?
  thread_content   Json?
  visualGuide      String?              @map("visual_guide")
  timing           String
  hashtags         String[]
  newsSource       String?              @map("news_source")
  sourceUrl        String?              @map("source_url")
  kpis             Json?
  riskAssessment   Json?                @map("risk_assessment")
  optimizationTips Json?                @map("optimization_tips")
  status           CotDraftStatus       @default(DRAFT)
  editedContent    String?              @map("edited_content")
  scheduledAt      DateTime?            @map("scheduled_at")
  postedAt         DateTime?            @map("posted_at")
  postId           String?              @map("post_id")
  viralScore       Float?               @map("viral_score")
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @default(now()) @updatedAt @map("updated_at")
  performance      CotDraftPerformance?
  session          CotSession           @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, conceptNumber])
  @@index([sessionId])
  @@index([status])
  @@index([scheduledAt])
  @@map("cot_drafts")
}

model CotDraftPerformance {
  id               String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  draftId          String   @unique @map("draft_id")
  likes30m         Int?     @map("likes_30m")
  retweets30m      Int?     @map("retweets_30m")
  replies30m       Int?     @map("replies_30m")
  impressions30m   Int?     @map("impressions_30m")
  likes1h          Int?     @map("likes_1h")
  retweets1h       Int?     @map("retweets_1h")
  replies1h        Int?     @map("replies_1h")
  impressions1h    Int?     @map("impressions_1h")
  likes24h         Int?     @map("likes_24h")
  retweets24h      Int?     @map("retweets_24h")
  replies24h       Int?     @map("replies_24h")
  impressions24h   Int?     @map("impressions_24h")
  engagementRate   Float?   @map("engagement_rate")
  viralCoefficient Float?   @map("viral_coefficient")
  collectedAt      DateTime @default(now()) @map("collected_at")
  lastUpdateAt     DateTime @default(now()) @updatedAt @map("last_update_at")
  draft            CotDraft @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@map("cot_draft_performance")
}

model ScheduledRetweet {
  id              String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  originalPostId  String    @map("original_post_id")
  originalContent String    @map("original_content")
  scheduledAt     DateTime  @map("scheduled_at")
  status          RTStatus  @default(SCHEDULED)
  rtStrategy      String    @map("rt_strategy")
  addComment      Boolean   @default(false) @map("add_comment")
  commentText     String?   @map("comment_text")
  viralDraftId    String?   @map("viral_draft_id")
  cotDraftId      String?   @map("cot_draft_id")
  executedAt      DateTime? @map("executed_at")
  rtPostId        String?   @map("rt_post_id")
  error           String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  @@index([status, scheduledAt])
  @@index([originalPostId])
  @@map("scheduled_retweets")
}

model UnifiedPerformance {
  id               String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  contentId        String   @unique @map("content_id")
  contentType      String   @map("content_type")
  metrics30m       Json?    @map("metrics_30m")
  metrics1h        Json?    @map("metrics_1h")
  metrics24h       Json?    @map("metrics_24h")
  engagementRate   Float?   @map("engagement_rate")
  viralCoefficient Float?   @map("viral_coefficient")
  collectedAt      DateTime @default(now()) @map("collected_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("unified_performance")
}

model NewsViralRelation {
  id             String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  newsId         String   @map("news_id")
  sessionId      String   @map("session_id")
  relevanceScore Float?   @map("relevance_score")
  usedInContent  Boolean  @default(false) @map("used_in_content")
  createdAt      DateTime @default(now()) @map("created_at")

  @@unique([newsId, sessionId], map: "news_viral_relations_unique")
  @@map("news_viral_relations")
}

model SessionActivityLog {
  id           String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  sessionId    String   @map("session_id")
  sessionType  String   @map("session_type")
  activityType String   @map("activity_type")
  details      Json?
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([sessionId])
  @@index([createdAt])
  @@map("session_activity_logs")
}

model ApiErrorLog {
  id             String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  endpoint       String
  method         String
  statusCode     Int      @map("status_code")
  errorMessage   String?  @map("error_message")
  stackTrace     String?  @map("stack_trace")
  requestBody    Json?    @map("request_body")
  requestHeaders Json?    @map("request_headers")
  userAgent      String?  @map("user_agent")
  ipAddress      String?  @map("ip_address")
  createdAt      DateTime @default(now()) @map("created_at")

  @@index([endpoint])
  @@index([statusCode])
  @@index([createdAt])
  @@map("api_error_logs")
}

model ViralSession {
  id                 String         @id @default(dbgenerated("(gen_random_uuid())::text"))
  theme              String
  platform           String
  style              String
  status             String         @default("CREATED")
  createdAt          DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  topics             Json?
  concepts           Json?
  selectedIds        String[]       @default([]) @map("selected_ids")
  contents           Json?
  characterProfileId String?        @map("character_profile_id")
  voiceStyleMode     String?        @map("voice_style_mode")
  drafts             ViralDraftV2[]

  @@index([status], map: "idx_viral_sessions_status")
  @@map("viral_sessions")
}

model ViralDraftV2 {
  id              String                 @id @default(dbgenerated("(gen_random_uuid())::text"))
  sessionId       String                 @map("session_id")
  conceptId       String                 @map("concept_id")
  title           String
  content         String
  hashtags        String[]
  visualNote      String?                @map("visual_note")
  status          String                 @default("DRAFT")
  scheduledAt     DateTime?              @map("scheduled_at") @db.Timestamptz(6)
  postedAt        DateTime?              @map("posted_at") @db.Timestamptz(6)
  tweetId         String?                @map("tweet_id")
  createdAt       DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  characterId     String?                @map("character_id")
  characterNote   String?                @map("character_note")
  sourceUrl       String?                @map("source_url")
  news_article_id String?
  performance     ViralDraftPerformance?
  session         ViralSession           @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_session")

  @@index([scheduledAt], map: "idx_viral_drafts_v2_scheduled_at")
  @@index([sessionId], map: "idx_viral_drafts_v2_session_id")
  @@index([status], map: "idx_viral_drafts_v2_status")
  @@map("viral_drafts_v2")
}

model ViralDraftPerformance {
  id               String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  draftId          String       @unique @map("draft_id")
  likes30m         Int?         @map("likes_30m")
  retweets30m      Int?         @map("retweets_30m")
  replies30m       Int?         @map("replies_30m")
  impressions30m   Int?         @map("impressions_30m")
  likes1h          Int?         @map("likes_1h")
  retweets1h       Int?         @map("retweets_1h")
  replies1h        Int?         @map("replies_1h")
  impressions1h    Int?         @map("impressions_1h")
  likes24h         Int?         @map("likes_24h")
  retweets24h      Int?         @map("retweets_24h")
  replies24h       Int?         @map("replies_24h")
  impressions24h   Int?         @map("impressions_24h")
  engagementRate   Float?       @map("engagement_rate")
  viralCoefficient Float?       @map("viral_coefficient")
  collectedAt      DateTime     @default(now()) @map("collected_at") @db.Timestamptz(6)
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  draft            ViralDraftV2 @relation(fields: [draftId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_draft")

  @@map("viral_draft_performance")
}

model CharacterProfile {
  id                      String   @id @default(cuid())
  name                    String   @unique
  display_name            String
  age                     Int
  gender                  Gender
  occupation              String
  catchphrase             String
  personality             String
  speaking_style          String
  expertise               String
  backstory               String
  philosophy              String?
  tone                    String
  voiceStyle              Json     @map("voice_style")
  emoji_style             String
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @default(now()) @updatedAt @map("updated_at")
  preferredNewsCategories String[] @default([]) @map("preferred_news_categories")
  newsCommentStyle        Json?    @map("news_comment_style")
  topicExpertise          Json?    @map("topic_expertise")

  @@map("character_profiles")
}

model accounts {
  id                  String  @id @default(dbgenerated("gen_random_uuid()"))
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_account_id])
  @@index([user_id])
}

model ai_patterns {
  id              String   @id
  name            String
  description     String
  prompt_template String
  example_output  String
  success_rate    Float    @default(0)
  usage_count     Int      @default(0)
  created_at      DateTime @default(now())
}

model content_drafts {
  id                   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  analysis_id          String       @db.Uuid
  concept_type         String       @db.VarChar(255)
  category             String       @db.VarChar(255)
  title                String
  content              String
  edited_content       String?
  explanation          String?
  buzz_factors         Json?        @default("[]")
  target_audience      String?
  estimated_engagement Json?        @default("{}")
  hashtags             Json?        @default("[]")
  visual_guide         String?
  platform             String?      @default("Twitter") @db.VarChar(50)
  format               String?      @default("single") @db.VarChar(50)
  status               String?      @default("draft") @db.VarChar(50)
  editor_notes         String?
  metadata             Json?
  created_at           DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?    @default(now()) @db.Timestamptz(6)
  gpt_analyses         gpt_analyses @relation(fields: [analysis_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([analysis_id, status])
  @@index([concept_type, category])
  @@index([analysis_id], map: "idx_content_drafts_analysis")
  @@index([analysis_id, status], map: "idx_content_drafts_status")
  @@index([concept_type, category], map: "idx_content_drafts_type")
}

model gpt_analyses {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  analysis_type  String           @db.VarChar(255)
  prompt         String
  response       Json             @default("{}")
  tokens         Int?
  duration       Int?
  metadata       Json?
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  content_drafts content_drafts[]

  @@index([analysis_type])
  @@index([created_at], map: "idx_gpt_analyses_created")
  @@index([analysis_type], map: "idx_gpt_analyses_type")
}

model news_analysis_jobs {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()"))
  type                  String
  status                String                  @default("pending")
  started_at            DateTime?
  completed_at          DateTime?
  error                 String?
  result                Json?
  metadata              Json?
  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())
  news_analysis_results news_analysis_results[]

  @@index([status])
  @@index([type])
}

model news_analysis_results {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  job_id             String
  article_id         String
  importance_score   Float
  category           String
  summary_ja         String
  key_points         Json
  impact_assessment  String
  expert_perspective String?
  metadata           Json?
  created_at         DateTime           @default(now())
  news_articles      NewsArticle        @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  news_analysis_jobs news_analysis_jobs @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([article_id])
  @@index([importance_score(sort: Desc)])
  @@index([job_id])
}

model prompt_templates {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(255)
  type       String    @db.VarChar(255)
  template   String
  variables  Json      @default("[]")
  is_active  Boolean?  @default(true)
  metadata   Json?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([type, is_active], map: "idx_prompt_templates_type")
  @@index([type, is_active])
}

model viral_analysis_logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model      String
  phase      String
  prompt     String
  response   Json      @default("{}")
  tokens     Int?
  duration   Int?
  success    Boolean
  error      String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([model, phase], map: "idx_viral_analysis_logs_model_phase")
}

model viral_config {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String    @unique
  value       Json      @default("{}")
  description String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model viral_opportunities {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topic       String
  platform    String
  viral_score Float
  time_window Int
  angle       String
  keywords    String[]      @default([])
  source_data Json?         @default("{}")
  status      String
  analyzed_at DateTime      @db.Timestamptz(6)
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?     @default(now()) @db.Timestamptz(6)
  viral_posts viral_posts[]

  @@index([platform, status], map: "idx_viral_opportunities_platform_status")
  @@index([viral_score], map: "idx_viral_opportunities_viral_score")
}

model viral_post_performance {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id           String      @unique @db.Uuid
  impressions_30m   Int?
  likes_30m         Int?
  retweets_30m      Int?
  comments_30m      Int?
  impressions_1h    Int?
  likes_1h          Int?
  retweets_1h       Int?
  comments_1h       Int?
  impressions_24h   Int?
  likes_24h         Int?
  retweets_24h      Int?
  comments_24h      Int?
  followers_24h     Int?
  engagement_rate   Float?
  viral_coefficient Float?
  created_at        DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?   @default(now()) @db.Timestamptz(6)
  viral_posts       viral_posts @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model viral_posts {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  opportunity_id         String                  @db.Uuid
  concept_type           String
  content                String
  thread_content         Json?
  visual_guide           String?
  hashtags               String[]                @default([])
  post_type              String
  platform               String
  scheduled_at           DateTime?               @db.Timestamptz(6)
  posted_at              DateTime?               @db.Timestamptz(6)
  post_url               String?
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @default(now()) @db.Timestamptz(6)
  viral_post_performance viral_post_performance?
  viral_opportunities    viral_opportunities     @relation(fields: [opportunity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([opportunity_id], map: "idx_viral_posts_opportunity_id")
  @@index([scheduled_at], map: "idx_viral_posts_scheduled_at")
}

enum PostStatus {
  DRAFT
  SCHEDULED
  POSTED
  FAILED
}

enum PostType {
  NEW
  RETWEET
  QUOTE
}

enum CotSessionStatus {
  PENDING
  THINKING
  EXECUTING
  INTEGRATING
  COMPLETED
  FAILED
  PAUSED

  @@map("cot_session_status")
}

enum CotPhaseStep {
  THINK
  EXECUTE
  INTEGRATE

  @@map("cot_phase_step")
}

enum CotPhaseStatus {
  PENDING
  THINKING
  EXECUTING
  INTEGRATING
  COMPLETED
  FAILED

  @@map("cot_phase_status")
}

enum CotDraftStatus {
  DRAFT
  EDITED
  SCHEDULED
  POSTED
  ARCHIVED

  @@map("cot_draft_status")
}

enum RTStatus {
  SCHEDULED
  EXECUTED
  FAILED
  CANCELLED

  @@map("rt_status")
}

enum Gender {
  male
  female
  other
}

enum draft_status {
  DRAFT
  EDITED
  SCHEDULED
  POSTED
  CANCELLED
}
