#!/usr/bin/env node

/**
 * ÊäïÁ®øÊ∏à„Åø„Éâ„É©„Éï„Éà„ÅÆSource TreeÊÉÖÂ†±„ÇíË©≥Á¥∞Á¢∫Ë™ç
 * URL„ÅåÂàá„Çå„Å¶„ÅÑ„ÇãÂïèÈ°å„ÇíÁâπÂÆö
 */

require('dotenv').config({ path: '.env.local' });
require('dotenv').config({ path: '.env' });

const { PrismaClient } = require('./lib/generated/prisma');
const prisma = new PrismaClient();

async function checkSourceTree() {
  console.log('üîç Source TreeË©≥Á¥∞Á¢∫Ë™ç\n');
  
  try {
    // ÊúÄÊñ∞„ÅÆÊäïÁ®øÊ∏à„Åø„Éâ„É©„Éï„Éà„ÇíÂèñÂæó
    const drafts = await prisma.viral_drafts.findMany({
      where: {
        status: 'POSTED',
        source_tweets: { not: null }
      },
      orderBy: { posted_at: 'desc' },
      take: 3,
      include: {
        viral_sessions: {
          select: {
            topics: true
          }
        }
      }
    });
    
    console.log(`üìä ${drafts.length}‰ª∂„ÅÆÊäïÁ®øÊ∏à„Åø„Éâ„É©„Éï„Éà„ÇíÁ¢∫Ë™ç\n`);
    
    for (const draft of drafts) {
      console.log('‚îÅ'.repeat(60));
      console.log(`üìù „Çø„Ç§„Éà„É´: ${draft.title}`);
      console.log(`üÜî ID: ${draft.id}`);
      console.log(`üìÖ ÊäïÁ®øÊó•ÊôÇ: ${draft.posted_at}`);
      
      // source_tweets„ÅÆË©≥Á¥∞„ÇíÁ¢∫Ë™ç
      const sourceTweets = draft.source_tweets;
      console.log(`\nüìö Source TweetsÊßãÈÄ†:`);
      console.log(`- format: ${sourceTweets.format}`);
      console.log(`- tweetCount: ${sourceTweets.tweetCount}`);
      console.log(`- postsÊï∞: ${sourceTweets.posts?.length || 0}`);
      
      // Source Tree„ÅÆpost„ÇíÊé¢„Åô
      const sourcePosts = sourceTweets.posts?.filter(post => post.type === 'source') || [];
      console.log(`\nüîó Source TreeÊäïÁ®ø: ${sourcePosts.length}‰ª∂`);
      
      sourcePosts.forEach((post, index) => {
        console.log(`\n--- Source ${index + 1} ---`);
        console.log(`Position: ${post.position}`);
        console.log(`Tweet ID: ${post.tweetId}`);
        console.log(`\nContent (ÂÖ®Êñá):`);
        console.log('‚îÄ'.repeat(40));
        console.log(post.content);
        console.log('‚îÄ'.repeat(40));
        
        // URL„ÇíÊäΩÂá∫„Åó„Å¶Á¢∫Ë™ç
        const urlRegex = /https?:\/\/[^\s]+/g;
        const urls = post.content.match(urlRegex) || [];
        console.log(`\nÊäΩÂá∫„Åï„Çå„ÅüURL: ${urls.length}‰ª∂`);
        urls.forEach((url, i) => {
          console.log(`  ${i + 1}. ${url}`);
          // URL„ÅåÂÆåÂÖ®„ÅãÁ¢∫Ë™ç
          const isComplete = url.includes('.html') || url.includes('.htm') || url.endsWith('/');
          console.log(`     ‚Üí ${isComplete ? '‚úÖ ÂÆåÂÖ®' : '‚ö†Ô∏è Âàá„Çå„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß'}`);
        });
      });
      
      // ÂÖÉ„ÅÆtopics„Éá„Éº„Çø„Å®ÊØîËºÉ
      if (draft.viral_sessions?.topics) {
        console.log(`\nüìä ÂÖÉ„ÅÆTopics„Éá„Éº„Çø„Å®„ÅÆÊØîËºÉ:`);
        try {
          const topicsText = typeof draft.viral_sessions.topics === 'string' 
            ? draft.viral_sessions.topics 
            : JSON.stringify(draft.viral_sessions.topics);
          const topicsData = JSON.parse(topicsText);
          
          if (topicsData.topics && Array.isArray(topicsData.topics)) {
            console.log(`ÂÖÉ„ÅÆÂá∫ÂÖ∏Êï∞: ${topicsData.topics.length}‰ª∂`);
            topicsData.topics.forEach((topic, i) => {
              console.log(`  ${i + 1}. ${topic.url}`);
            });
          }
        } catch (e) {
          console.log('  ‚Üí topics„Éá„Éº„Çø„ÅÆ„Éë„Éº„Çπ„Ç®„É©„Éº');
        }
      }
      
      console.log('\n');
    }
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// ÂÆüË°å
checkSourceTree();