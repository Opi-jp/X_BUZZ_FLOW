const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabaseUrl = 'https://atyvtqorzthnszyulquu.supabase.co'
const supabaseKey = process.env.SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseKey) {
  console.error('SUPABASE_ANON_KEY not found in environment variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function executeMigration() {
  console.log('üöÄ V2„ÉÜ„Éº„Éñ„É´„ÅÆ„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÇíÈñãÂßã„Åó„Åæ„Åô...')
  
  const statements = [
    // ViralSession„ÉÜ„Éº„Éñ„É´
    `CREATE TABLE IF NOT EXISTS viral_sessions (
      id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,
      theme TEXT NOT NULL,
      platform TEXT NOT NULL,
      style TEXT NOT NULL,
      status TEXT NOT NULL DEFAULT 'CREATED',
      created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      topics JSONB,
      concepts JSONB,
      selected_ids TEXT[] DEFAULT '{}',
      contents JSONB
    )`,
    
    // ViralDraftV2„ÉÜ„Éº„Éñ„É´
    `CREATE TABLE IF NOT EXISTS viral_drafts_v2 (
      id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,
      session_id TEXT NOT NULL,
      concept_id TEXT NOT NULL,
      title TEXT NOT NULL,
      content TEXT NOT NULL,
      hashtags TEXT[],
      visual_note TEXT,
      status TEXT NOT NULL DEFAULT 'DRAFT',
      scheduled_at TIMESTAMP WITH TIME ZONE,
      posted_at TIMESTAMP WITH TIME ZONE,
      tweet_id TEXT,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      CONSTRAINT fk_session FOREIGN KEY (session_id) REFERENCES viral_sessions(id) ON DELETE CASCADE
    )`,
    
    // ViralDraftPerformance„ÉÜ„Éº„Éñ„É´
    `CREATE TABLE IF NOT EXISTS viral_draft_performance (
      id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,
      draft_id TEXT UNIQUE NOT NULL,
      likes_30m INTEGER,
      retweets_30m INTEGER,
      replies_30m INTEGER,
      impressions_30m INTEGER,
      likes_1h INTEGER,
      retweets_1h INTEGER,
      replies_1h INTEGER,
      impressions_1h INTEGER,
      likes_24h INTEGER,
      retweets_24h INTEGER,
      replies_24h INTEGER,
      impressions_24h INTEGER,
      engagement_rate FLOAT,
      viral_coefficient FLOAT,
      collected_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
      CONSTRAINT fk_draft FOREIGN KEY (draft_id) REFERENCES viral_drafts_v2(id) ON DELETE CASCADE
    )`,
    
    // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
    `CREATE INDEX IF NOT EXISTS idx_viral_sessions_status ON viral_sessions(status)`,
    `CREATE INDEX IF NOT EXISTS idx_viral_drafts_v2_session_id ON viral_drafts_v2(session_id)`,
    `CREATE INDEX IF NOT EXISTS idx_viral_drafts_v2_status ON viral_drafts_v2(status)`,
    `CREATE INDEX IF NOT EXISTS idx_viral_drafts_v2_scheduled_at ON viral_drafts_v2(scheduled_at)`,
    
    // „Éà„É™„Ç¨„ÉºÈñ¢Êï∞
    `CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql'`,
    
    // „Éà„É™„Ç¨„Éº
    `CREATE TRIGGER update_viral_drafts_v2_updated_at BEFORE UPDATE ON viral_drafts_v2
      FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()`,
    
    `CREATE TRIGGER update_viral_draft_performance_updated_at BEFORE UPDATE ON viral_draft_performance
      FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()`
  ]
  
  let successCount = 0
  let errorCount = 0
  
  for (let i = 0; i < statements.length; i++) {
    const statement = statements[i]
    console.log(`\nÂÆüË°å‰∏≠ (${i + 1}/${statements.length}):`)
    console.log(statement.substring(0, 60) + '...')
    
    try {
      const { error } = await supabase.rpc('exec_sql', { sql: statement })
      
      if (error) {
        // RPC„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂà•„ÅÆÊñπÊ≥ï„ÇíË©¶„Åô
        if (error.message.includes('function') || error.message.includes('exec_sql')) {
          console.log('‚ö†Ô∏è  RPC not available, trying direct approach...')
          // Supabase JS„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Åß„ÅØÁõ¥Êé•SQLÂÆüË°å„Åå„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅ
          // „ÉÜ„Éº„Éñ„É´‰ΩúÊàê„ÅØÊâãÂãï„ÅßË°å„ÅÜÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô
          console.log('‚ùå „Åì„ÅÆ„Çπ„ÉÜ„Éº„Éà„É°„É≥„Éà„ÅØÊâãÂãï„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
          errorCount++
        } else {
          throw error
        }
      } else {
        console.log('‚úÖ ÊàêÂäü')
        successCount++
      }
    } catch (error) {
      console.log('‚ùå „Ç®„É©„Éº:', error.message)
      errorCount++
    }
  }
  
  console.log(`\nüìä ÁµêÊûú: ${successCount}ÊàêÂäü, ${errorCount}„Ç®„É©„Éº`)
  
  // „ÉÜ„Éº„Éñ„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
  console.log('\nüìã „ÉÜ„Éº„Éñ„É´„ÅÆÁ¢∫Ë™ç...')
  
  try {
    const { data: sessions, error: sessionsError } = await supabase
      .from('viral_sessions')
      .select('id')
      .limit(1)
    
    if (!sessionsError) {
      console.log('‚úÖ viral_sessions „ÉÜ„Éº„Éñ„É´„ÅåÂ≠òÂú®„Åó„Åæ„Åô')
    } else {
      console.log('‚ùå viral_sessions:', sessionsError.message)
    }
    
    const { data: drafts, error: draftsError } = await supabase
      .from('viral_drafts_v2')
      .select('id')
      .limit(1)
    
    if (!draftsError) {
      console.log('‚úÖ viral_drafts_v2 „ÉÜ„Éº„Éñ„É´„ÅåÂ≠òÂú®„Åó„Åæ„Åô')
    } else {
      console.log('‚ùå viral_drafts_v2:', draftsError.message)
    }
    
    const { data: perf, error: perfError } = await supabase
      .from('viral_draft_performance')
      .select('id')
      .limit(1)
    
    if (!perfError) {
      console.log('‚úÖ viral_draft_performance „ÉÜ„Éº„Éñ„É´„ÅåÂ≠òÂú®„Åó„Åæ„Åô')
    } else {
      console.log('‚ùå viral_draft_performance:', perfError.message)
    }
  } catch (error) {
    console.log('„ÉÜ„Éº„Éñ„É´Á¢∫Ë™ç„Ç®„É©„Éº:', error)
  }
}

executeMigration().catch(console.error)