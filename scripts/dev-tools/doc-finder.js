#!/usr/bin/env node

/**
 * „Éâ„Ç≠„É•„É°„É≥„ÉàÊ§úÁ¥¢„ÉÑ„Éº„É´
 * 
 * 79ÂÄã„ÇÇ„ÅÇ„Çã„Éâ„Ç≠„É•„É°„É≥„Éà„Åã„ÇâÂøÖË¶Å„Å™ÊÉÖÂ†±„ÇíÊé¢„Åô
 * 
 * ‰Ωø„ÅÑÊñπ:
 * node scripts/dev-tools/doc-finder.js "api"
 * node scripts/dev-tools/doc-finder.js --list
 * node scripts/dev-tools/doc-finder.js --duplicates
 */

const fs = require('fs').promises;
const path = require('path');
const glob = require('glob');

class DocFinder {
  async searchDocs(keyword) {
    console.log(`üîç "${keyword}"„Å´Èñ¢„Åô„Çã„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÊ§úÁ¥¢‰∏≠...\n`);
    
    const files = glob.sync('docs/**/*.md', {
      ignore: ['**/node_modules/**']
    });
    
    const matches = [];
    
    for (const file of files) {
      try {
        const content = await fs.readFile(file, 'utf-8');
        const lowerContent = content.toLowerCase();
        const lowerKeyword = keyword.toLowerCase();
        
        if (lowerContent.includes(lowerKeyword)) {
          // ÊúÄÂàù„ÅÆ3Ë°å„ÇíÂèñÂæó„Åó„Å¶Ê¶ÇË¶Å„Å®„Åô„Çã
          const lines = content.split('\n').filter(line => line.trim());
          const title = lines[0]?.replace(/^#+ /, '') || 'No title';
          const summary = lines.slice(1, 3).join(' ').substring(0, 100) + '...';
          
          // „Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆÂá∫ÁèæÂõûÊï∞„Çí„Ç´„Ç¶„É≥„Éà
          const count = (lowerContent.match(new RegExp(lowerKeyword, 'g')) || []).length;
          
          matches.push({
            file,
            title,
            summary,
            count
          });
        }
      } catch (error) {
        console.error(`Error reading ${file}:`, error.message);
      }
    }
    
    // Âá∫ÁèæÂõûÊï∞„Åß„ÇΩ„Éº„Éà
    matches.sort((a, b) => b.count - a.count);
    
    if (matches.length === 0) {
      console.log('‚ùå Ë©≤ÂΩì„Åô„Çã„Éâ„Ç≠„É•„É°„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
      return;
    }
    
    console.log(`üìö ${matches.length}ÂÄã„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü:\n`);
    
    matches.forEach((match, index) => {
      console.log(`${index + 1}. ${match.file} (${match.count}Âõû)`);
      console.log(`   üìù ${match.title}`);
      console.log(`   ${match.summary}\n`);
    });
  }
  
  async listAllDocs() {
    const files = glob.sync('docs/**/*.md');
    
    console.log('üìö „Éâ„Ç≠„É•„É°„É≥„Éà‰∏ÄË¶ß:\n');
    
    // „Éá„Ç£„É¨„ÇØ„Éà„É™Âà•„Å´Êï¥ÁêÜ
    const byDir = {};
    
    for (const file of files) {
      const dir = path.dirname(file);
      if (!byDir[dir]) {
        byDir[dir] = [];
      }
      
      try {
        const content = await fs.readFile(file, 'utf-8');
        const firstLine = content.split('\n')[0]?.replace(/^#+ /, '') || 'No title';
        byDir[dir].push({
          file: path.basename(file),
          title: firstLine
        });
      } catch (error) {
        byDir[dir].push({
          file: path.basename(file),
          title: 'Error reading file'
        });
      }
    }
    
    for (const [dir, files] of Object.entries(byDir)) {
      console.log(`üìÅ ${dir}/`);
      files.forEach(f => {
        console.log(`   ${f.file} - ${f.title}`);
      });
      console.log('');
    }
    
    console.log(`ÂêàË®à: ${files.length}ÂÄã„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà`);
  }
  
  async findDuplicates() {
    console.log('üîç ÂÜÖÂÆπ„ÅåÈáçË§á„Åó„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Éâ„Ç≠„É•„É°„É≥„Éà„ÇíÊ§úÁ¥¢‰∏≠...\n');
    
    const files = glob.sync('docs/**/*.md');
    const docs = [];
    
    // ÂêÑ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆ‰∏ªË¶Å„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÊäΩÂá∫
    for (const file of files) {
      try {
        const content = await fs.readFile(file, 'utf-8');
        const words = content
          .toLowerCase()
          .match(/\b[a-z]{4,}\b/g) || [];
        
        // È†ªÂá∫ÂçòË™ûTOP10„ÇíÂèñÂæó
        const wordCount = {};
        words.forEach(word => {
          if (!['this', 'that', 'with', 'from', 'have', 'been', 'will', 'your', 'what', 'when'].includes(word)) {
            wordCount[word] = (wordCount[word] || 0) + 1;
          }
        });
        
        const topWords = Object.entries(wordCount)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 10)
          .map(([word]) => word);
        
        docs.push({ file, topWords });
      } catch (error) {
        // „Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
      }
    }
    
    // È°û‰ººÂ∫¶„ÇíË®àÁÆó
    const similarities = [];
    
    for (let i = 0; i < docs.length; i++) {
      for (let j = i + 1; j < docs.length; j++) {
        const common = docs[i].topWords.filter(w => docs[j].topWords.includes(w));
        if (common.length >= 5) {
          similarities.push({
            file1: docs[i].file,
            file2: docs[j].file,
            common: common.length,
            words: common.slice(0, 5).join(', ')
          });
        }
      }
    }
    
    if (similarities.length === 0) {
      console.log('‚ú® Â§ß„Åç„Å™ÈáçË§á„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
      return;
    }
    
    similarities.sort((a, b) => b.common - a.common);
    
    console.log('üìä ÂÜÖÂÆπ„ÅåÈ°û‰ºº„Åó„Å¶„ÅÑ„Çã„Éâ„Ç≠„É•„É°„É≥„Éà:\n');
    similarities.slice(0, 10).forEach(sim => {
      console.log(`${sim.file1}`);
      console.log(`${sim.file2}`);
      console.log(`  ÂÖ±ÈÄö„Ç≠„Éº„ÉØ„Éº„Éâ(${sim.common}ÂÄã): ${sim.words}`);
      console.log('');
    });
  }
}

async function main() {
  const finder = new DocFinder();
  const args = process.argv.slice(2);
  
  if (args.length === 0 || args.includes('--help')) {
    console.log('üìñ ‰Ωø„ÅÑÊñπ:');
    console.log('  node scripts/dev-tools/doc-finder.js <„Ç≠„Éº„ÉØ„Éº„Éâ>');
    console.log('  node scripts/dev-tools/doc-finder.js --list');
    console.log('  node scripts/dev-tools/doc-finder.js --duplicates');
    return;
  }
  
  if (args.includes('--list')) {
    await finder.listAllDocs();
  } else if (args.includes('--duplicates')) {
    await finder.findDuplicates();
  } else {
    await finder.searchDocs(args[0]);
  }
}

main().catch(console.error);