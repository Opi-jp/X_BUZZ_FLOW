const { Pool } = require('pg');
require('dotenv').config({ path: '.env.local' });

async function runCompleteMigration() {
  console.log('üöÄ CoTÂÆåÂÖ®„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÇíÈñãÂßã„Åó„Åæ„Åô...\n');
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });

  try {
    // „Çπ„ÉÜ„ÉÉ„Éó1: EnumÂûã„ÅÆ‰ΩúÊàê
    console.log('üìã „Çπ„ÉÜ„ÉÉ„Éó1: EnumÂûã„Çí‰ΩúÊàê‰∏≠...');
    
    // PostStatus, PostType „ÇÇÂê´„ÇÅ„Å¶‰ΩúÊàêÔºàÊó¢Â≠ò„ÉÅ„Çß„ÉÉ„ÇØ‰ªò„ÅçÔºâ
    const enumQueries = [
      {
        name: 'PostStatus',
        values: ['DRAFT', 'SCHEDULED', 'POSTED', 'FAILED'],
        query: `DO $$ BEGIN
          CREATE TYPE "PostStatus" AS ENUM ('DRAFT', 'SCHEDULED', 'POSTED', 'FAILED');
        EXCEPTION
          WHEN duplicate_object THEN null;
        END $$;`
      },
      {
        name: 'PostType',
        values: ['NEW', 'RETWEET', 'QUOTE'],
        query: `DO $$ BEGIN
          CREATE TYPE "PostType" AS ENUM ('NEW', 'RETWEET', 'QUOTE');
        EXCEPTION
          WHEN duplicate_object THEN null;
        END $$;`
      },
      {
        name: 'cot_session_status',
        values: ['PENDING', 'THINKING', 'EXECUTING', 'INTEGRATING', 'COMPLETED', 'FAILED', 'PAUSED'],
        query: `DO $$ BEGIN
          CREATE TYPE "cot_session_status" AS ENUM ('PENDING', 'THINKING', 'EXECUTING', 'INTEGRATING', 'COMPLETED', 'FAILED', 'PAUSED');
        EXCEPTION
          WHEN duplicate_object THEN null;
        END $$;`
      },
      {
        name: 'cot_phase_step',
        values: ['THINK', 'EXECUTE', 'INTEGRATE'],
        query: `DO $$ BEGIN
          CREATE TYPE "cot_phase_step" AS ENUM ('THINK', 'EXECUTE', 'INTEGRATE');
        EXCEPTION
          WHEN duplicate_object THEN null;
        END $$;`
      },
      {
        name: 'cot_phase_status',
        values: ['PENDING', 'THINKING', 'EXECUTING', 'INTEGRATING', 'COMPLETED', 'FAILED'],
        query: `DO $$ BEGIN
          CREATE TYPE "cot_phase_status" AS ENUM ('PENDING', 'THINKING', 'EXECUTING', 'INTEGRATING', 'COMPLETED', 'FAILED');
        EXCEPTION
          WHEN duplicate_object THEN null;
        END $$;`
      },
      {
        name: 'cot_draft_status',
        values: ['DRAFT', 'EDITED', 'SCHEDULED', 'POSTED', 'ARCHIVED'],
        query: `DO $$ BEGIN
          CREATE TYPE "cot_draft_status" AS ENUM ('DRAFT', 'EDITED', 'SCHEDULED', 'POSTED', 'ARCHIVED');
        EXCEPTION
          WHEN duplicate_object THEN null;
        END $$;`
      }
    ];

    for (const enumDef of enumQueries) {
      try {
        await pool.query(enumDef.query);
        console.log(`  ‚úÖ ${enumDef.name} ‰ΩúÊàêÂÆå‰∫Ü`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è  ${enumDef.name} - ${error.message}`);
      }
    }

    // EnumÂûã„ÅÆÁ¢∫Ë™ç
    const enumCheck = await pool.query(`
      SELECT typname, array_agg(enumlabel ORDER BY enumsortorder) as values
      FROM pg_type t
      JOIN pg_enum e ON t.oid = e.enumtypid
      WHERE typname LIKE 'cot_%' OR typname IN ('PostStatus', 'PostType')
      GROUP BY typname
      ORDER BY typname
    `);
    
    console.log('\nüìä ‰ΩúÊàê„Åï„Çå„ÅüEnumÂûã:');
    console.table(enumCheck.rows);

    // „Çπ„ÉÜ„ÉÉ„Éó2: „ÉÜ„Éº„Éñ„É´„ÅÆ‰ΩúÊàê
    console.log('\nüìã „Çπ„ÉÜ„ÉÉ„Éó2: „ÉÜ„Éº„Éñ„É´„Çí‰ΩúÊàê‰∏≠...');

    // cot_sessions„ÉÜ„Éº„Éñ„É´
    console.log('  üîÑ cot_sessions„ÉÜ„Éº„Éñ„É´...');
    await pool.query(`
      CREATE TABLE IF NOT EXISTS "cot_sessions" (
        "id" TEXT NOT NULL DEFAULT gen_random_uuid()::text,
        "expertise" TEXT NOT NULL,
        "style" TEXT NOT NULL,
        "platform" TEXT NOT NULL,
        "status" "cot_session_status" NOT NULL DEFAULT 'PENDING',
        "current_phase" INTEGER NOT NULL DEFAULT 1,
        "current_step" "cot_phase_step" NOT NULL DEFAULT 'THINK',
        "last_error" TEXT,
        "retry_count" INTEGER NOT NULL DEFAULT 0,
        "next_retry_at" TIMESTAMP(3),
        "total_tokens" INTEGER NOT NULL DEFAULT 0,
        "total_duration" INTEGER NOT NULL DEFAULT 0,
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updated_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "completed_at" TIMESTAMP(3),
        CONSTRAINT "cot_sessions_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('  ‚úÖ cot_sessions„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü');

    // cot_phases„ÉÜ„Éº„Éñ„É´
    console.log('  üîÑ cot_phases„ÉÜ„Éº„Éñ„É´...');
    await pool.query(`
      CREATE TABLE IF NOT EXISTS "cot_phases" (
        "id" TEXT NOT NULL DEFAULT gen_random_uuid()::text,
        "session_id" TEXT NOT NULL,
        "phase_number" INTEGER NOT NULL,
        "think_prompt" TEXT,
        "think_result" JSONB,
        "think_tokens" INTEGER DEFAULT 0,
        "think_at" TIMESTAMP(3),
        "execute_result" JSONB,
        "execute_duration" INTEGER DEFAULT 0,
        "execute_at" TIMESTAMP(3),
        "integrate_prompt" TEXT,
        "integrate_result" JSONB,
        "integrate_tokens" INTEGER DEFAULT 0,
        "integrate_at" TIMESTAMP(3),
        "status" "cot_phase_status" NOT NULL DEFAULT 'PENDING',
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updated_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "cot_phases_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('  ‚úÖ cot_phases„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü');

    // cot_drafts„ÉÜ„Éº„Éñ„É´
    console.log('  üîÑ cot_drafts„ÉÜ„Éº„Éñ„É´...');
    await pool.query(`
      CREATE TABLE IF NOT EXISTS "cot_drafts" (
        "id" TEXT NOT NULL DEFAULT gen_random_uuid()::text,
        "session_id" TEXT NOT NULL,
        "concept_number" INTEGER NOT NULL,
        "title" TEXT NOT NULL,
        "hook" TEXT NOT NULL,
        "angle" TEXT NOT NULL,
        "format" TEXT NOT NULL,
        "content" TEXT,
        "thread_content" JSONB,
        "visual_guide" TEXT,
        "timing" TEXT NOT NULL,
        "hashtags" TEXT[],
        "news_source" TEXT,
        "source_url" TEXT,
        "kpis" JSONB,
        "risk_assessment" JSONB,
        "optimization_tips" JSONB,
        "status" "cot_draft_status" NOT NULL DEFAULT 'DRAFT',
        "edited_content" TEXT,
        "scheduled_at" TIMESTAMP(3),
        "posted_at" TIMESTAMP(3),
        "post_id" TEXT,
        "viral_score" DOUBLE PRECISION,
        "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updated_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "cot_drafts_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('  ‚úÖ cot_drafts„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü');

    // cot_draft_performance„ÉÜ„Éº„Éñ„É´
    console.log('  üîÑ cot_draft_performance„ÉÜ„Éº„Éñ„É´...');
    await pool.query(`
      CREATE TABLE IF NOT EXISTS "cot_draft_performance" (
        "id" TEXT NOT NULL DEFAULT gen_random_uuid()::text,
        "draft_id" TEXT NOT NULL,
        "likes_30m" INTEGER,
        "retweets_30m" INTEGER,
        "replies_30m" INTEGER,
        "impressions_30m" INTEGER,
        "likes_1h" INTEGER,
        "retweets_1h" INTEGER,
        "replies_1h" INTEGER,
        "impressions_1h" INTEGER,
        "likes_24h" INTEGER,
        "retweets_24h" INTEGER,
        "replies_24h" INTEGER,
        "impressions_24h" INTEGER,
        "engagement_rate" DOUBLE PRECISION,
        "viral_coefficient" DOUBLE PRECISION,
        "collected_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "last_update_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "cot_draft_performance_pkey" PRIMARY KEY ("id")
      )
    `);
    console.log('  ‚úÖ cot_draft_performance„ÉÜ„Éº„Éñ„É´‰ΩúÊàêÂÆå‰∫Ü');

    // „Çπ„ÉÜ„ÉÉ„Éó3: „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅÆ‰ΩúÊàê
    console.log('\nüìã „Çπ„ÉÜ„ÉÉ„Éó3: „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çí‰ΩúÊàê‰∏≠...');
    const indexes = [
      `CREATE INDEX IF NOT EXISTS "cot_sessions_status_created_at_idx" ON "cot_sessions"("status", "created_at")`,
      `CREATE INDEX IF NOT EXISTS "cot_sessions_current_phase_current_step_idx" ON "cot_sessions"("current_phase", "current_step")`,
      `CREATE INDEX IF NOT EXISTS "cot_phases_session_id_phase_number_idx" ON "cot_phases"("session_id", "phase_number")`,
      `CREATE UNIQUE INDEX IF NOT EXISTS "cot_phases_session_id_phase_number_key" ON "cot_phases"("session_id", "phase_number")`,
      `CREATE INDEX IF NOT EXISTS "cot_drafts_session_id_idx" ON "cot_drafts"("session_id")`,
      `CREATE INDEX IF NOT EXISTS "cot_drafts_status_idx" ON "cot_drafts"("status")`,
      `CREATE INDEX IF NOT EXISTS "cot_drafts_scheduled_at_idx" ON "cot_drafts"("scheduled_at")`,
      `CREATE UNIQUE INDEX IF NOT EXISTS "cot_drafts_session_id_concept_number_key" ON "cot_drafts"("session_id", "concept_number")`,
      `CREATE UNIQUE INDEX IF NOT EXISTS "cot_draft_performance_draft_id_key" ON "cot_draft_performance"("draft_id")`
    ];

    let indexCount = 0;
    for (const index of indexes) {
      try {
        await pool.query(index);
        indexCount++;
      } catch (error) {
        console.log(`  ‚ö†Ô∏è  „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàê„Ç®„É©„Éº: ${error.message}`);
      }
    }
    console.log(`  ‚úÖ ${indexCount}/${indexes.length} „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàêÂÆå‰∫Ü`);

    // „Çπ„ÉÜ„ÉÉ„Éó4: Â§ñÈÉ®„Ç≠„ÉºÂà∂Á¥Ñ„ÅÆËøΩÂä†
    console.log('\nüìã „Çπ„ÉÜ„ÉÉ„Éó4: Â§ñÈÉ®„Ç≠„ÉºÂà∂Á¥Ñ„ÇíËøΩÂä†‰∏≠...');
    const constraints = [
      {
        table: 'cot_phases',
        constraint: 'cot_phases_session_id_fkey',
        sql: `ALTER TABLE "cot_phases" ADD CONSTRAINT "cot_phases_session_id_fkey" 
              FOREIGN KEY ("session_id") REFERENCES "cot_sessions"("id") 
              ON DELETE CASCADE ON UPDATE CASCADE`
      },
      {
        table: 'cot_drafts',
        constraint: 'cot_drafts_session_id_fkey',
        sql: `ALTER TABLE "cot_drafts" ADD CONSTRAINT "cot_drafts_session_id_fkey" 
              FOREIGN KEY ("session_id") REFERENCES "cot_sessions"("id") 
              ON DELETE CASCADE ON UPDATE CASCADE`
      },
      {
        table: 'cot_draft_performance',
        constraint: 'cot_draft_performance_draft_id_fkey',
        sql: `ALTER TABLE "cot_draft_performance" ADD CONSTRAINT "cot_draft_performance_draft_id_fkey" 
              FOREIGN KEY ("draft_id") REFERENCES "cot_drafts"("id") 
              ON DELETE CASCADE ON UPDATE CASCADE`
      }
    ];

    for (const fk of constraints) {
      try {
        await pool.query(fk.sql);
        console.log(`  ‚úÖ ${fk.constraint} ËøΩÂä†ÂÆå‰∫Ü`);
      } catch (error) {
        if (error.message.includes('already exists')) {
          console.log(`  ‚ö†Ô∏è  ${fk.constraint} „ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô`);
        } else {
          console.log(`  ‚ùå ${fk.constraint} „Ç®„É©„Éº: ${error.message}`);
        }
      }
    }

    // ÊúÄÁµÇÁ¢∫Ë™ç
    console.log('\nüìä ÊúÄÁµÇÁ¢∫Ë™ç: ‰ΩúÊàê„Åï„Çå„Åü„ÉÜ„Éº„Éñ„É´');
    const finalCheck = await pool.query(`
      SELECT 
        table_name,
        (SELECT COUNT(*) FROM information_schema.columns 
         WHERE table_name = t.table_name 
         AND table_schema = 'public') as columns,
        (SELECT COUNT(*) FROM information_schema.table_constraints
         WHERE table_name = t.table_name 
         AND table_schema = 'public'
         AND constraint_type = 'FOREIGN KEY') as foreign_keys,
        (SELECT COUNT(*) FROM information_schema.table_constraints
         WHERE table_name = t.table_name 
         AND table_schema = 'public'
         AND constraint_type IN ('UNIQUE', 'PRIMARY KEY')) as constraints
      FROM information_schema.tables t
      WHERE table_schema = 'public' 
      AND table_name IN ('cot_sessions', 'cot_phases', 'cot_drafts', 'cot_draft_performance')
      ORDER BY table_name
    `);

    console.table(finalCheck.rows);

    if (finalCheck.rows.length === 4) {
      console.log('\n‚úÖ „Åô„Åπ„Å¶„ÅÆCoT„ÉÜ„Éº„Éñ„É´„ÅåÊ≠£Â∏∏„Å´‰ΩúÊàê„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
      console.log('\nüéâ „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÔºÅ');
      console.log('üìå Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:');
      console.log('   1. https://x-buzz-flow.vercel.app/viral/cot „ÅßCoT„Ç∑„Çπ„ÉÜ„É†„Å´„Ç¢„ÇØ„Çª„Çπ');
      console.log('   2. „ÄåAI„Äç„ÄåÊïôËÇ≤ÁöÑ„Äç„ÄåTwitter„Äç„ÇíÈÅ∏Êäû„Åó„Å¶„ÉÜ„Çπ„ÉàÂÆüË°å');
    } else {
      console.log('\n‚ö†Ô∏è  ‰∏ÄÈÉ®„ÅÆ„ÉÜ„Éº„Éñ„É´„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ');
    }

  } catch (error) {
    console.error('\n‚ùå „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error.message);
    console.error('Ë©≥Á¥∞:', error);
  } finally {
    await pool.end();
    console.log('\nüîå „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü');
  }
}

// ÂÆüË°å
console.log('================================');
console.log('Chain of Thought „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥');
console.log('================================\n');

runCompleteMigration();