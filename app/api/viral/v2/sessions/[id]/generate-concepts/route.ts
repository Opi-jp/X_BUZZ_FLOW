import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

type RouteParams = {
  params: Promise<{
    id: string
  }>
}

export async function POST(
  request: Request,
  { params }: RouteParams
) {
  try {
    const { id } = await params
    
    // „Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂèñÂæó
    const session = await prisma.viralSession.findUnique({
      where: { id }
    })
    
    if (!session) {
      return NextResponse.json(
        { error: 'Session not found' },
        { status: 404 }
      )
    }
    
    if (!session.topics || session.status !== 'TOPICS_COLLECTED') {
      return NextResponse.json(
        { error: 'Topics not collected yet' },
        { status: 400 }
      )
    }

    // „Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊõ¥Êñ∞
    await prisma.viralSession.update({
      where: { id },
      data: { status: 'GENERATING_CONCEPTS' }
    })

    const topics = (session.topics as any).parsed || []
    
    if (topics.length === 0) {
      throw new Error('No topics found in session')
    }

    // ÂêÑ„Éà„Éî„ÉÉ„ÇØ„Å´ÂØæ„Åó„Å¶3„Å§„ÅÆ„Ç≥„É≥„Çª„Éó„Éà„ÇíÁîüÊàê
    const conceptPromises = topics.map(async (topic: any, topicIndex: number) => {
      const prompt = `„ÅÇ„Å™„Åü„ÅØ„ÄÅÊñ∞„Åü„Å™„Éà„É¨„É≥„Éâ„ÇíÁâπÂÆö„Åó„ÄÅÊµÅË°å„ÅÆÊ≥¢„Åå„Éî„Éº„ÇØ„Å´ÈÅî„Åô„ÇãÂâç„Å´„Åù„ÅÆÊ≥¢„Å´‰πó„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆ„Ç≥„É≥„Çª„Éó„Éà„Çí‰ΩúÊàê„Åô„Çã„Éê„Ç∫„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑÊà¶Áï•ÂÆ∂„Åß„Åô„ÄÇ

‰ª•‰∏ã„ÅÆ„Éà„Éî„ÉÉ„ÇØ„Å´„Å§„ÅÑ„Å¶„ÄÅ„Äê${session.platform}„Äë„Åß„Äê${session.style}„Äë„Çπ„Çø„Ç§„É´„Åß„Éê„Ç∫„ÇãÊäïÁ®ø„Ç≥„É≥„Çª„Éó„Éà„Çí3„Å§‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„Éà„Éî„ÉÉ„ÇØ: ${topic.TOPIC}
ÂàÜÊûê: ${topic.perplexityAnalysis}
URL: ${topic.url}

„Äê„Éï„ÉÉ„ÇØ„Äë
‰∏ãË®ò„ÅÆ5Á®ÆÈ°û„ÅÆ„ÅÑ„Åö„Çå„Åã„ÄÅ„ÅÇ„Çã„ÅÑ„ÅØË§áÊï∞„ÇíÁî®„ÅÑ„Å¶3„Å§„Éï„ÉÉ„ÇØ„ÇíËÄÉ„Åà„Å¶„Åè„Å†„Åï„ÅÑ
1. ÊÑèÂ§ñÊÄßÔºàSurpriseÔºâ
2. Á∑äÊÄ•ÊÄßÔºàUrgencyÔºâ
3. Ëá™Â∑±ÊäïÂΩ±ÔºàIdentityÔºâ
4. Êï∞Â≠ó„Éª„É≠„Ç∏„ÉÉ„ÇØÔºàClarityÔºâ
5. Âïè„ÅÑ„ÉªÊú™ÂÆåÊÄßÔºàTensionÔºâ

„ÄêËßíÂ∫¶„Äë
„Éï„ÉÉ„ÇØ„Çí„ÇÇ„Å®„Å´„ÄÅ‰ª•‰∏ã„ÇíÂèÇËÄÉ„Å´Áã¨Ëá™ËßíÂ∫¶„Çí3„Å§ËÄÉ„Åà„Å¶„Åè„Å†„Åï„ÅÑ
- ÂèçÂØæÊ¥æ„ÅØ‰∏ñË´ñ„Å´Áï∞Ë≠∞„ÇíÂî±„Åà„Çã
- Â∞ÇÈñÄÂÆ∂„Å´„Çà„ÇãÂÜÖÈÉ®Ë¶ñÁÇπ„ÅÆÂàÜÊûê
- ÂÄã‰∫∫ÁöÑ„Å™„Å§„Å™„Åå„Çä„ÅÆÁâ©Ë™û
- ÊïôËÇ≤„ÅÆÂÜÖË®≥
- Ê¨°„Å´‰Ωï„ÅåËµ∑„Åì„Çã„Åã„Çí‰∫àÊ∏¨„Åô„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ
- ËàûÂè∞Ë£è„ÅÆÊ¥ûÂØü
- ÈÅéÂéª„ÅÆ„Ç§„Éô„É≥„Éà„Å®„ÅÆÊØîËºÉÂÜÖÂÆπ

„ÄêÊäïÁ®øÊßãÈÄ†„Äë
‰∏ãË®ò„ÅÆÊßãÈÄ†„Åß„ÄÅÊäïÁ®øÊßãÈÄ†„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ
1.„Ç™„Éº„Éó„Éã„É≥„Ç∞„Éï„ÉÉ„ÇØ
„ÄÄüëâ ËààÂë≥„ÇíÂºï„Åè1Ë°åÔºàÂïè„ÅÑ„ÉªÈ©ö„Åç„ÉªÁµêË´ñ„ÅÆÈÄÜÊèêÁ§∫Ôºâ
„ÄÄ‚Äª‰æãÔºö„Äå„Åü„Å£„Åü1„Å§„ÅÆÂ∑•Â§´„Åß„ÄÅ‰ªï‰∫ã„Åå3ÂÄçÈÄü„Åè„Å™„Çã„Å®„Åó„Åü„ÇâÔºü„Äç
2.ËÉåÊôØÔºèÂïèÈ°åÊèêËµ∑ÔºàWhyÔºâ
„ÄÄüëâ „Å™„Åú„Åù„Çå„ÅåÈáçË¶Å„Å™„ÅÆ„ÅãÔºè‰Ωï„ÅåÂïèÈ°å„Å™„ÅÆ„Åã
„ÄÄ‚Äª‰æãÔºö„ÄåÂ§ö„Åè„ÅÆ‰∫∫„Åå"ÊÉÖÂ†±„Å´ÊåØ„ÇäÂõû„Åï„Çå„ÇãÂÉç„ÅçÊñπ"„Çí„Åó„Å¶„Çã„Äç
3.ÂÖ∑‰ΩìÁöÑ„Å™‰∏≠Ë∫´Ôºè„Çπ„Éà„Éº„É™„ÉºÔºàWhat/HowÔºâ
„ÄÄüëâ „Éé„Ç¶„Éè„Ç¶„Éª‰ΩìÈ®ìË´á„Éª„Çπ„Éà„Éº„É™„Éº„ÉªÁÆáÊù°Êõ∏„Åç„Åß„ÇÇOK
„ÄÄ‚Äª‰æãÔºö„Äå„Åº„Åè„ÅåÂèñ„ÇäÂÖ•„Çå„Åü„ÅÆ„ÅØ„ÄÅ"Êúù10ÂàÜ„ÅÆ„Äá„ÄáÁøíÊÖ£"„Äç
4.ÂÜÖÁúÅ„ÉªÂÖ±ÊÑü„Éª„Åæ„Å®„ÇÅÔºàSo WhatÔºâ
„ÄÄüëâ Ë™≠ËÄÖ„ÅÆÊ∞óÊåÅ„Å°„Å´ÂØÑ„ÇäÊ∑ª„ÅÑ„ÄÅÊÑèÂë≥„Å•„ÅëÔºè‰æ°ÂÄ§Âåñ„Åô„Çã
„ÄÄ‚Äª‰æãÔºö„ÄåÂ§ßÂàá„Å™„ÅÆ„ÅØ„ÄÅ„ÉÑ„Éº„É´„Åò„ÇÉ„Å™„Åè"‰Ωø„ÅÑÊñπ"„Å†„Å£„Åü„Äç
5.CTAÔºàCall to ActionÔºâ
„ÄÄüëâ „É™„Éó„ÉªRT„Éª‰øùÂ≠ò„Éª„Éó„É≠„Éï„Ç£„Éº„É´Ë™òÂ∞é„Å™„Å©
„ÄÄ‚Äª‰æãÔºö„Äå„ÅÇ„Å™„Åü„ÅÆÁøíÊÖ£Ë°ì„ÄÅ„Çà„Åã„Å£„Åü„ÇâÊïô„Åà„Å¶„Äç

„Äê„Éì„Ç∏„É•„Ç¢„É´Ê°à„Äë
‰∏äË®ò„Å´„Åµ„Åï„Çè„Åó„ÅÑ„Éì„Ç∏„É•„Ç¢„É´Ê°à„ÇíÊèêÁ§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ

„ÄêÊäïÁ®ø„Çø„Ç§„Éü„É≥„Ç∞„Äë
‰∏äË®ò„Å´„Åµ„Åï„Çè„Åó„ÅÑÊäïÁ®ø„Çø„Ç§„Éü„É≥„Ç∞„ÇíÊèêÁ§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ

„Äê„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞Ê°à„Äë
‰∏äË®ò„Å´„Åµ„Åï„Çè„Åó„ÅÑ„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„Çí3„Å§ÊèêÁ§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ

„ÄêÈáçË¶Å„Å™Ê≥®ÊÑè‰∫ãÈ†Ö„Äë
„Åì„Çå„ÅØ„Ç≥„É≥„Çª„Éó„ÉàÔºàÈ™®ÁµÑ„Åø„ÉªË®≠Ë®àÂõ≥Ôºâ„ÅÆÁîüÊàê„Åß„Åô„ÄÇÂÆüÈöõ„ÅÆÊäïÁ®øÊñá„ÇíÊõ∏„Åè„ÅÆ„Åß„ÅØ„Å™„Åè„ÄÅ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂÜÖÂÆπ„Å´„Åô„Çã„Åã„ÅÆ„ÄåÊñπÂêëÊÄß„Äç„ÄåÊñπÈáù„Äç„Äå„Ç¢„Éó„É≠„Éº„ÉÅ„Äç„ÇíÁ§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

structureÂÜÖ„ÅÆÂêÑË¶ÅÁ¥†„Å´„ÅØ„ÄÅÂÖ∑‰ΩìÁöÑ„Å™ÊñáÁ´†„Åß„ÅØ„Å™„Åè„ÄÅ„Äå„Å©„ÅÆ„Çà„ÅÜ„Å™ÂÜÖÂÆπ„ÇíÂê´„ÇÅ„Çã„Åã„Äç„Äå„Å©„Çì„Å™„Ç¢„Éó„É≠„Éº„ÉÅ„ÇíÂèñ„Çã„Åã„Äç„Äå‰Ωï„ÇíÁãô„ÅÜ„Åã„Äç„Å®„ÅÑ„ÅÜÊñπÂêëÊÄß„ÇíË®òËºâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

ÂøÖ„Åö‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„Åß3„Å§„ÅÆ„Ç≥„É≥„Çª„Éó„Éà„ÇíÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
[
  {
    "conceptId": "topic${topicIndex + 1}_concept1",
    "format": "single",
    "hookType": "‰ΩøÁî®„Åó„Åü„Éï„ÉÉ„ÇØ„ÅÆÁ®ÆÈ°û",
    "angle": "ÈÅ∏Êäû„Åó„ÅüËßíÂ∫¶",
    "structure": {
      "openingHook": "„Åì„ÅÆ„Éà„Éî„ÉÉ„ÇØ„Åß„Å©„ÅÜËààÂë≥„ÇíÂºï„Åè„ÅãÔºàÊñπÂêëÊÄßÔºâ",
      "background": "„Å©„Çì„Å™ÂïèÈ°åÊèêËµ∑„Çí„Åô„Çã„ÅãÔºàÊñπÂêëÊÄßÔºâ",
      "mainContent": "‰Ωï„Çí‰ºù„Åà„Çã„ÅãÔºàÊñπÂêëÊÄßÔºâ",
      "reflection": "„Å©„ÅÜÂÖ±ÊÑü„ÇíÁîü„ÇÄ„ÅãÔºàÊñπÂêëÊÄßÔºâ",
      "cta": "„Å©„Çì„Å™Ë°åÂãï„Çí‰øÉ„Åô„ÅãÔºàÊñπÂêëÊÄßÔºâ"
    },
    "visual": "„Éì„Ç∏„É•„Ç¢„É´Ê°à",
    "timing": "ÊäïÁ®ø„Çø„Ç§„Éü„É≥„Ç∞",
    "hashtags": ["Èñ¢ÈÄ£„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞"]
  },
  {
    "conceptId": "topic${topicIndex + 1}_concept2",
    "format": "thread",
    "hookType": "‰ΩøÁî®„Åó„Åü„Éï„ÉÉ„ÇØ„ÅÆÁ®ÆÈ°û",
    "angle": "ÈÅ∏Êäû„Åó„ÅüËßíÂ∫¶",
    "structure": { Âêå‰∏ä„ÅÆ5Ë¶ÅÁ¥†„ÇíË®òËºâ },
    "visual": "„Éì„Ç∏„É•„Ç¢„É´Ê°à",
    "timing": "ÊäïÁ®ø„Çø„Ç§„Éü„É≥„Ç∞",
    "hashtags": ["Èñ¢ÈÄ£„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞"]
  },
  {
    "conceptId": "topic${topicIndex + 1}_concept3",
    "format": "carousel",
    "hookType": "‰ΩøÁî®„Åó„Åü„Éï„ÉÉ„ÇØ„ÅÆÁ®ÆÈ°û",
    "angle": "ÈÅ∏Êäû„Åó„ÅüËßíÂ∫¶",
    "structure": { Âêå‰∏ä„ÅÆ5Ë¶ÅÁ¥†„ÇíË®òËºâ },
    "visual": "„Éì„Ç∏„É•„Ç¢„É´Ê°à",
    "timing": "ÊäïÁ®ø„Çø„Ç§„Éü„É≥„Ç∞",
    "hashtags": ["Èñ¢ÈÄ£„Éè„ÉÉ„Ç∑„É•„Çø„Ç∞"]
  }
]`

      const response = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'JSONÂΩ¢Âºè„ÅßÊ≠£Á¢∫„Å´Âá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.8,
        max_tokens: 2000
      })

      const content = response.choices[0].message.content || '[]'
      let concepts = []
      
      try {
        concepts = JSON.parse(content)
      } catch (e) {
        console.error('Failed to parse concepts:', e)
        // JSON„Éñ„É≠„ÉÉ„ÇØ„ÇíÊé¢„Åô
        const jsonMatch = content.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          try {
            concepts = JSON.parse(jsonMatch[0])
          } catch (e2) {
            console.error('Failed to parse extracted JSON:', e2)
          }
        }
      }

      // „Éà„Éî„ÉÉ„ÇØÊÉÖÂ†±„ÇíÂêÑ„Ç≥„É≥„Çª„Éó„Éà„Å´ËøΩÂä†
      return concepts.map((concept: any) => ({
        ...concept,
        topicTitle: topic.TOPIC,
        topicUrl: topic.url,
        topicSummary: topic.summary
      }))
    })

    const allConceptsArrays = await Promise.all(conceptPromises)
    const allConcepts = allConceptsArrays.flat()

    console.log(`Generated ${allConcepts.length} concepts total`)

    // „Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÊõ¥Êñ∞
    const updatedSession = await prisma.viralSession.update({
      where: { id },
      data: {
        concepts: allConcepts,
        status: 'CONCEPTS_GENERATED'
      }
    })

    return NextResponse.json({
      success: true,
      session: updatedSession,
      conceptsCount: allConcepts.length
    })
    
  } catch (error) {
    console.error('Error generating concepts:', error)
    
    // „Ç®„É©„ÉºÊôÇ„ÅØ„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊàª„Åô
    try {
      await prisma.viralSession.update({
        where: { id: (await params).id },
        data: { status: 'TOPICS_COLLECTED' }
      })
    } catch (e) {
      // „É™„Çª„ÉÉ„Éà„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
    }
    
    return NextResponse.json(
      { error: 'Failed to generate concepts' },
      { status: 500 }
    )
  }
}