import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// Anthropic Claude API
const CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages'

interface ThreadGenerationResult {
  mainTweet: string
  newsItems: Array<{
    articleId: string
    rank: number
    tweetContent: string
    originalUrl: string
  }>
}

// POST: ÈáçË¶ÅÂ∫¶È†Ü„Å´„ÇΩ„Éº„Éà„Åï„Çå„Åü„Éã„É•„Éº„Çπ„Åã„Çâ„ÉÑ„É™„ÉºÊäïÁ®ø„ÇíÁîüÊàê
export async function POST(request: NextRequest) {
  try {
    // API„Ç≠„Éº„ÅÆÁ¢∫Ë™ç
    if (!process.env.CLAUDE_API_KEY) {
      console.error('CLAUDE_API_KEY is not set')
      throw new Error('Claude API key is not configured')
    }
    
    const body = await request.json()
    const { date, limit = 10 } = body

    // ÊåáÂÆöÊó•„ÅÆÂàÜÊûêÊ∏à„ÅøË®ò‰∫ã„ÇíÈáçË¶ÅÂ∫¶È†Ü„Å´ÂèñÂæó
    const startDate = new Date(date || new Date().toISOString().split('T')[0])
    startDate.setHours(0, 0, 0, 0)
    const endDate = new Date(startDate)
    endDate.setDate(endDate.getDate() + 1)

    const articles = await prisma.newsArticle.findMany({
      where: {
        processed: true,
        importance: { not: null },
        publishedAt: {
          gte: startDate,
          lt: endDate,
        },
      },
      orderBy: {
        importance: 'desc',
      },
      take: limit,
      include: {
        source: true,
      },
    })

    if (articles.length === 0) {
      return NextResponse.json(
        { error: 'No analyzed articles found for the specified date' },
        { status: 404 }
      )
    }

    // „ÉÑ„Ç§„Éº„ÉàÁîüÊàê„ÅÆ„Éó„É≠„É≥„Éó„Éà‰ΩúÊàê
    const articlesData = articles.map((article, index) => ({
      rank: index + 1,
      title: article.title,
      japaneseSummary: (article.metadata as any)?.analysis?.japaneseSummary || article.summary,
      sourceName: article.source.name,
      url: article.url,
      importance: article.importance,
    }))

    const prompt = `‰ª•‰∏ã„ÅÆAI„Éã„É•„Éº„ÇπTOP${articles.length}„Åã„ÇâTwitter„ÉÑ„É™„ÉºÊäïÁ®ø„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„Éã„É•„Éº„Çπ‰∏ÄË¶ß:
${articlesData.map(a => `${a.rank}. ${a.title}
   Êó•Êú¨Ë™ûË¶ÅÁ¥Ñ: ${a.japaneseSummary}
   „ÇΩ„Éº„Çπ: ${a.sourceName}
   URL: ${a.url}
   ÈáçË¶ÅÂ∫¶: ${a.importance}`).join('\n\n')}

Ë¶ÅÊ±Ç‰∫ãÈ†Ö:
1. „É°„Ç§„É≥„ÉÑ„Ç§„Éº„ÉàÔºà1„Å§ÁõÆÔºâ:
   - „Äåü§ñ Êú¨Êó•„ÅÆAI„Éã„É•„Éº„ÇπTOP${articles.length}„Äç„ÅßÂßã„ÇÅ„Çã
   - ÊúÄ„ÇÇÈáçË¶Å„Å™1-2ÂÄã„ÅÆ„Éã„É•„Éº„Çπ„Çí„Éè„Ç§„É©„Ç§„Éà
   - 140ÊñáÂ≠ó‰ª•ÂÜÖÔºàÊó•Êú¨Ë™û„Å™„ÅÆ„ÅßÔºâ
   - ÁµµÊñáÂ≠ó„ÇíÂäπÊûúÁöÑ„Å´‰ΩøÁî®
   - „ÄåÁ∂ö„Åç„ÅØ„Çπ„É¨„ÉÉ„Éâ„Åßüëá„Äç„ÅßÁµÇ„Åà„Çã

2. ÂÄãÂà•„Éã„É•„Éº„Çπ„ÉÑ„Ç§„Éº„ÉàÔºàÂêÑ„Éã„É•„Éº„Çπ„Åî„Å®Ôºâ:
   - „Äå${articles.length > 1 ? '„ÄêN‰Ωç„Äë' : ''}„Äç„ÅßÂßã„ÇÅ„ÇãÔºàN„ÅØÈ†Ü‰ΩçÔºâ
   - Êó•Êú¨Ë™û„ÅßË¶ÅÁ¥ÑÔºàÂÖÉ„ÅåËã±Ë™û„ÅÆÂ†¥Âêà„ÅØÁøªË®≥Ê∏à„Åø„ÅÆË¶ÅÁ¥Ñ„Çí‰ΩøÁî®Ôºâ
   - ÈáçË¶Å„Éù„Ç§„É≥„Éà„ÇíÁ∞°ÊΩî„Å´
   - Ë©≤ÂΩì„Åô„ÇãÁµµÊñáÂ≠ó„ÇíËøΩÂä†
   - 140ÊñáÂ≠ó‰ª•ÂÜÖÔºàÊó•Êú¨Ë™û„ÅÆÂ†¥ÂêàÔºâ
   - „Éè„ÉÉ„Ç∑„É•„Çø„Ç∞„ÅØ‰Ωø„Çè„Å™„ÅÑ

‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ:
{
  "mainTweet": "„É°„Ç§„É≥„ÉÑ„Ç§„Éº„Éà„ÅÆÂÜÖÂÆπ",
  "newsItems": [
    {
      "rank": 1,
      "tweetContent": "ÂÄãÂà•„ÉÑ„Ç§„Éº„Éà„ÅÆÂÜÖÂÆπ"
    }
  ]
}`

    // Claude APIÂëº„Å≥Âá∫„Åó
    const response = await fetch(CLAUDE_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': process.env.CLAUDE_API_KEY!,
        'anthropic-version': '2023-06-01',
      },
      body: JSON.stringify({
        model: 'claude-3-haiku-20240307',
        max_tokens: 3000,
        messages: [
          {
            role: 'user',
            content: prompt,
          },
        ],
      }),
    })

    if (!response.ok) {
      const errorData = await response.text()
      console.error('Claude API error:', response.status, errorData)
      throw new Error(`Claude API error: ${response.status}`)
    }

    const data = await response.json()
    const generationText = data.content[0].text

    // JSON„Çí„Éë„Éº„Çπ
    let generation: ThreadGenerationResult
    try {
      const jsonMatch = generationText.match(/```json\n([\s\S]*?)\n```/) || generationText.match(/{[\s\S]*}/)
      const jsonStr = jsonMatch ? (jsonMatch[1] || jsonMatch[0]) : generationText
      const parsed = JSON.parse(jsonStr)
      
      // ÁîüÊàêÁµêÊûú„Å®articleÊÉÖÂ†±„Çí„Éû„Éº„Ç∏
      generation = {
        mainTweet: parsed.mainTweet,
        newsItems: parsed.newsItems.map((item: any) => ({
          articleId: articles[item.rank - 1].id,
          rank: item.rank,
          tweetContent: item.tweetContent,
          originalUrl: articles[item.rank - 1].url,
        })),
      }
    } catch (parseError) {
      console.error('Failed to parse Claude response:', generationText)
      throw new Error('Failed to parse thread generation')
    }

    // NewsThread„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
    const thread = await prisma.newsThread.create({
      data: {
        title: `AI„Éã„É•„Éº„ÇπTOP${articles.length} - ${startDate.toLocaleDateString('ja-JP')}`,
        status: 'draft',
        scheduledAt: null,
        metadata: {
          date: startDate.toISOString(),
          articleCount: articles.length,
        },
        items: {
          create: [
            {
              content: generation.mainTweet,
              position: 0,
              metadata: { type: 'main' },
            },
            ...generation.newsItems.map((item) => ({
              content: item.tweetContent,
              position: item.rank,
              articleId: item.articleId,
              metadata: { 
                type: 'news',
                originalUrl: item.originalUrl,
              },
            })),
          ],
        },
      },
      include: {
        items: {
          include: {
            article: true,
          },
          orderBy: {
            position: 'asc',
          },
        },
      },
    })

    return NextResponse.json({
      threadId: thread.id,
      title: thread.title,
      itemsCount: thread.items.length,
      mainTweet: generation.mainTweet,
      newsItems: generation.newsItems,
    })
  } catch (error) {
    console.error('Error generating thread:', error)
    return NextResponse.json(
      { error: 'Failed to generate thread', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
}

// GET: ÁîüÊàêÊ∏à„Åø„Çπ„É¨„ÉÉ„Éâ‰∏ÄË¶ß„ÇíÂèñÂæó
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const status = searchParams.get('status')
    const limit = parseInt(searchParams.get('limit') || '20')

    const where: any = {}
    if (status) {
      where.status = status
    }

    const threads = await prisma.newsThread.findMany({
      where,
      orderBy: {
        createdAt: 'desc',
      },
      take: limit,
      include: {
        items: {
          orderBy: {
            position: 'asc',
          },
        },
        _count: {
          select: {
            items: true,
          },
        },
      },
    })

    return NextResponse.json(threads)
  } catch (error) {
    console.error('Error fetching threads:', error)
    return NextResponse.json(
      { error: 'Failed to fetch threads' },
      { status: 500 }
    )
  }
}